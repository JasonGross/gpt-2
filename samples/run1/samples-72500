======== SAMPLE 1 ========
 : X.t
  lr : tree
  x : X.t
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H0 : InT y rr
  ============================
   ((X.eq y x \/ InT y (Leaf elt) \/ InT y rl) \/ InT y rr)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : X.t
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H0 : InT y rr
  ============================
   ((X.eq y x \/ InT y (Leaf elt) \/ InT y rl) \/ InT y rr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (2) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : X.t
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H0 : InT y rr
  ============================
   ((X.eq y x \/ InT y (Leaf elt) \/ InT y rl) \/ InT y rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (2) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : X.t
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H0 : InT y rr
  ============================
   ((X.eq y x \/ InT y (Leaf elt) \/ InT y rl) \/ InT y rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : X.t
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H0 : InT y rr
  ============================
   ((X.eq y x \/ InT y (Leaf elt) \/ InT y rl) \/ InT y rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (2) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : X.t
  rh : I.t
  rl : tree
