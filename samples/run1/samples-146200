======== SAMPLE 1 ========
t : Prop),
        eval_opt_clause env (or_clause cl cl') <->
         ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl'
  cl' : clause
  env : Env
  c : clause
  H2 : eval_tt env a
  H3 : make_conj (eval_tt env) c -> False
  H0 : make_conj (eval_tt env) c -> False
  H : make_conj (eval_tt env) cl' -> False
  H1 : make_conj (eval_tt env) cl' -> False
  ============================
   False


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (4) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                   eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
               unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
                deduce t t' = Some u ->
                forall env : Env, eval' env t -> eval' env t' -> eval' env u
  a : (Term' * Annot)%type
  cl : list (Term' * Annot)
  IHcl : forall (cl' : clause) (env : Env),
         eval_opt_clause env (or_clause cl cl') <->
         ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl'
  cl' : clause
  env : Env
  c : clause
  H2 : eval_tt env a
  H3 : make_conj (eval_tt env) c -> False
  H0 : make_conj (eval_tt env) c -> False
  H : make_conj (eval_tt env) cl' -> False
  H1 : make_conj (eval_tt env) cl' -> False
  ============================
   False


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                   eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
              unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
               deduce t t' = Some u ->
               forall env : Env, eval' env t -> eval' env t' -> eval' env u
  a : (Term' * Annot)
