======== SAMPLE 1 ========
1) > height l + 2
  _x : height l <= height (Node (Node rll rlx rld rlr _x3) rx rd rr _x1) + 2
  _x2 : height rr < height (Node rll rlx rld rlr _x3)
  y : key
  H : In y l
  ============================
   (In y l)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (3) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  _x3 : int
  _x0 : height (Node (Node rll rlx rld rlr _x3) rx rd rr _x1) > height l + 2
  _x : height l <= height (Node (Node rll rlx rld rlr _x3) rx rd rr _x1) + 2
  _x2 : height rr < height (Node rll rlx rld rlr _x3)
  y : key
  H : In y l
  ============================
   (In y l)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Debug: Level 1: No matching clauses for match.

Debug: Level 1: No matching clauses for match.

Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  _x0 : height (Node (Node rll rlx rld rlr _x3) rx rd rr _x1) > height l + 2
  _x : height l <= height (Node (Node rll rlx rld rlr _x3) rx rd rr _x1) + 2
  _x2 : height rr < height (Node rll rlx rld rlr _x3)
  y : key
  H : In y l
  ============================
   (In y l)


Debug:
Going to execute:
<Coq.Init.Tauto.axioms> flags ||
  match reverse goal with
  | id:(?X1 -> ?X2) -> ?X3
    |- _ =>
        cut X3;
         [ intro; clear id; t_tauto_intuit
         | cut (X1 -> X2);
            [ exact
            id
            | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear
               id; (solve [ t_tauto_intuit ]) ] ]
  | id:~ ?X1 -> ?X3
    |- _ =>
        cut X3;
         [ intro; clear id; t_tauto_intuit
         | cut (~ X1);
            [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
  | |- ?X1 =>
        <Coq.Init.Tauto.is_disj> flags X1; (solve
         [ left; t_tauto_intuit | right; t_tauto_intuit ])
  end ||
    match goal with
    | |- _ -> _ => intro; t_
