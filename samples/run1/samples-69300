======== SAMPLE 1 ========
2
  |- _ =>
      <Coq.Init.Tauto.is_disj> flags X1; (solve
       [ left; t_tauto_intuit | right; t_tauto_intuit ])
  end ||
    match goal with
    | |- _ -> _ => intro; t_tauto_intuit
    | |- _ => t_reduce; t_solver
    end || t_solver


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  r : tree
  y : X.t
  r0 : tree
  H : InT y r
  ============================
   (InT y r)


Debug: Going to execute:
<Coq.Init.Tauto.axioms> flags


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  r : tree
  y : X.t
  r0 : tree
  H : InT y r
  ============================
   (InT y r)


Debug:
Going to execute:
fun flags =>
  match reverse goal with
  | |- ?X1 => <Coq.Init.Tauto.is_unit_or_eq> flags X1; constructor 1
  | _:?X1 |- _ => <Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption
  | _:?X1 |- ?X1 => assumption
  end


TcDebug (4) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  r : tree
  y : X.t
  r0 : tree
  H : InT y r
  ============================
   (InT y r)


Debug:
Going to execute:
match reverse goal with
| |- ?X1 => <Coq.Init.Tauto.is_unit_or_eq> flags X1; constructor 1
| _:?X1 |- _ => <Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption
| _:?X1 |- ?X1 => assumption
end


TcDebug (4) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  r : tree
  y : X.t
  r0 : tree
  H : InT y r
  ============================
   (InT y r)


Debug:
Going to execute:
<Coq.Init.Tauto.is_unit_or_eq> flags X1; constructor 1


TcDebug (5) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  r : tree
  y : X.t
  r0 : tree
  H : InT y r
  ============================
   (InT y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_unit_or_eq> flags X1


TcDebug (5) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  r : tree
  y : X.t
  r0 : tree
  H : InT y r
  ============================
   (InT y r)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_unit_or_eq@0>


TcDebug (6) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  r : tree
  y : X.t
  r0 : tree
  H : InT y r
  ============================
   (InT y r)


Debug: Going
