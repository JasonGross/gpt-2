======== SAMPLE 1 ========
 ll lx : X.t
  r : tree
  H6 : Ok lr
  H7 : Ok r
  H8 : lt_tree x' (Rd ll lx lr)
  H9 : gt_tree x' r
  H2 : InT y r
  H10 : X.eq y x'
  H11 : X.eq y x' \/ InT y lr \/ InT y r
  ============================
   (X.eq y x' \/ InT y lr \/ InT y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (3) > 
Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  H6 : Ok lr
  H7 : Ok r
  H8 : lt_tree x' (Rd ll lx lr)
  H9 : gt_tree x' r
  H2 : InT y r
  H10 : X.eq y x'
  H11 : X.eq y x' \/ InT y lr \/ InT y r
  ============================
   (X.eq y x' \/ InT y lr \/ InT y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (3) > 
Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  H6 : Ok lr
  H7 : Ok r
  H8 : lt_tree x' (Rd ll lx lr)
  H9 : gt_tree x' r
  H2 : InT y r
  H10 : X.eq y x'
  H11 : X.eq y x' \/ InT y lr \/ InT y r
  ============================
   (X.eq y x' \/ InT y lr \/ InT y r)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (4) > 
Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  H6 : Ok lr
  H7 : Ok r
  H8 : lt_tree x' (Rd ll lx lr)
  H9 : gt_tree x' r
  H2 : InT y r
  H10 : X.eq y x'
  H11 : X.eq y x' \/ InT y lr \/ InT y r
  ============================
   (X.eq y x' \/ InT y lr \/ InT y r)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  H6 : Ok lr
  H7 : Ok r
  H8 : lt_tree x' (Rd ll lx lr)
  H9 : gt_tree x' r
  H2 : InT y r
  H10 : X.eq y x'
  H11 : X.eq y x' \/ InT y lr \/ InT y r
  ============================
   (X.eq y x' \/ InT y lr \/ InT y r)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (3) > 
Goal:
  
  i : Color.
