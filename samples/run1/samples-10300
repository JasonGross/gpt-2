======== SAMPLE 1 ========
                                                                                                                                                                                                                     ]                                                         {                              :: In o in req (Node rl rx rr)
                                    : In o' in req rl
                             :: In o' in req (max (Node rl rx rr) + 1)))
                                                                                                                           (max (Node rl rx rr) + 1)))
                              :: X.lt y acc
  acc : list elt
  H0 : eval_opt_clause env_clause nil
  H1 : False
  H4 : eval_clause env_clause nil
  ============================
   False


Debug: Going to execute:
<Coq.Init.Tauto.axioms> flags


TcDebug (2) > 
Debug: Level 2: evaluation returns
<Coq.Init.Tauto.axioms> flags


Debug: Level 1: Annot is now used in a conclusion.

Debug: Level 1: Evaluated term: Annot

Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f0 : key -> option elt -> option elt' -> option elt''
  f : key -> elt -> option elt' -> option elt''
  mapl : t elt -> t elt''
  mapr : t elt' -> t elt''
  f0_f : forall (x : key) (d : elt) (o : option elt'),
          f x d o = f0 x (Some d) o
  mapl_bst : forall m : t elt, bst m -> bst (mapl m)
  mapr_bst : forall m' : t elt', bst m' -> bst (mapr m')
  mapl_f0 : forall (x : X.t) (m : t elt),
             bst m ->
             find x (mapl m) =
             match find x m with
             | Some d => f0 x (Some d) None
 
