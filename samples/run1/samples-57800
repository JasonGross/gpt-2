======== SAMPLE 1 ========
q.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (2) > 
Goal:
  
  x : E.t
  y : E.t
  r : t
  _x : I.t
  ll : tree
  lx : X.t
  lr : tree
  x0 : elt
  H0 : X.eq x x0
  H2 : InT y lr
  ============================
   (InT y (Node _x ll lx lr))


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (2) > 
Goal:
  
  x : E.t
  y : E.t
  r : t
  _x : I.t
  ll : tree
  lx : X.t
  lr : tree
  x0 : elt
  H0 : X.eq x x0
  H2 : InT y lr
  ============================
   (InT y (Node _x ll lx lr))


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  x : E.t
  y : E.t
  r : t
  _x : I.t
  ll : tree
  lx : X.t
  lr : tree
  x0 : elt
  H0 : X.eq x x0
  H2 : InT y lr
  ============================
   (InT y (Node _x ll lx lr))


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (2) > 
Goal:
  
  x : E.t
  y : E.t
  r : t
  _x : I.t
  ll : tree
  lx : X.t
  lr : tree
  x0 : elt
  H0 : X.eq x x0
  H2 : InT y lr
  ============================
   (InT y (Node _x ll lx lr))


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (3) > 
Goal:
  
  x : E.t
  y : E.t
  r : t
  _x : I.t
  ll : tree
  lx : X.t
  lr : tree
  x0 : elt
  H0 : X.eq x x0
  H2 : InT y lr
  ============================
   (InT y (Node _x ll lx lr))


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  x : E.t
  y : E.t
  r : t
  _x : I.t
  ll : tree
  lx : X.t
  lr : tree
  x0 : elt
  H0 : X.eq x x0
  H2 : InT y lr
  ============================
   (InT y (Node _x ll lx lr))


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (2) > 
Goal:
  
  x : E.t
  y : E.t
  r : t
  _x : I.t
  ll : tree
  lx : X.t
  lr : tree
  x0 : elt
  H0 : X.eq x x0
  H2 : InT y lr
  ============================
   (InT y (Node _x ll lx lr))


Debug: Going to execute:
<Coq.Init
