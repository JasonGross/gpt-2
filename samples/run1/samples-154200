======== SAMPLE 1 ========
: In y (Node ll lx ld lr _x0) \/ In y r)


Debug: Going to execute:
<tauto_plugin::constructor@3>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x0 : int
  _x : height (Node ll lx ld lr _x0) > height r + 2
  _x1 : height ll >= height lr
  y : key
  H : In y r
  ============================
   (X.eq y x)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (1) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x0 : int
  _x : height (Node ll lx ld lr _x0) > height r + 2
  _x1 : height ll >= height lr
  y : key
  H : In y r
  ============================
   (X.eq y x)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (1) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x0 : int
  _x : height (Node ll lx ld lr _x0) > height r + 2
  _x1 : height ll >= height lr
  y : key
  H : In y r
  ============================
   (X.eq y x)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (1) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x0 : int
  _x : height (Node ll lx ld lr _x0) > height r + 2
  _x1 : height ll >= height lr
  y : key
  H : In y r
  ============================
   (X.eq y x)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x0 : int
  _x : height (Node ll lx ld lr _x0) > height r + 2
  _x1 : height ll >= height lr
  y : key
  H : In y r
  ============================
   (X.eq y x)


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x0 : int
  _x : height (Node ll lx ld lr _x0) > height r + 2
  _x1 : height ll >= height l
