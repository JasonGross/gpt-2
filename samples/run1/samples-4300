======== SAMPLE 1 ========
 e1 : X.t
  l2 : tree
  r2 : tree
  s2' : tree
  e1 : X.compare x2 f x' = f a && a
  IHt1 : forall y : key,
          bst r1 ->
          bst r2' ->
          In y r1 \/ In y r2' ->
          find y (map2_opt l1 l2) = f0 y (find y r1) (find y r2')
  IHt0 : forall y : key,
          bst r0 ->
          bst r0 ->
          In y r0 \/ In y r0' ->
          find y (map2_opt l1 l2) = f0 y (find y r1) (find y r2')
  y : key
  Hrec' : forall y : key,
         bst (map2_opt l1 l2)
  y0 : key
  H2 : forall y : key, In y0' <> 0
  H3 : forall y : key, In y0' <> 0 -> In y0'
  IH1 : forall y : key,
         bst (map2_opt l1 l2)
  IH2 : forall y0 : key, In y0' <> 0
  H0 : forall y' : key, In y0' <> 0
  H6 : In y0' l2
  H6' : bst l2'
  H7 : bst r2'
  H8 : lt_tree x1 l1
  H9 : gt_tree x1 r1
  H : In y0'
  H1 : In y0'
  ============================
   (In y0' \/ In y0' \/ In y0' \/ In y0')


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (2) > 
Goal:
  
  x : key
  e : elt
  r : t elt
  _x : int
  l : t elt
  u : key
  _x0 : uint
  H : gt_tree x l1
  ============================
   (In y0' \/ In y0' \/ In y0' \/ In y0')


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  x : key
  e : elt
  r : t elt
  _x : int
  l : t elt
  u : key
  _x0 : uint
  H : gt_tree x l1
  ============================
   (In y0' \/ In y0' \/ In y0' \/ In y0')


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (1) > 
Goal:
  
  x : key
  e : elt
  r : t elt
  _x : int
  l : t elt
  u : key
  _x0 : uint
  H : gt_tree x l1
  ============================
   (In y0' \/ In y0' \/ In y0' \/ In y0')


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (1) > 
Goal:
  
  x : key
  e : elt
  r : t elt
  _x : int
  l : t elt
  u : key
  _x0 : uint
  H : g
