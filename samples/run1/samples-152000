======== SAMPLE 1 ========
 : tree
  rx : X.t
  rr : tree
  y : elt
  l : tree
  H : X.eq y rlx
  ============================
   (X.eq y rlx \/
    (X.eq y x \/ InT y l \/ InT y rl \/ X.eq y rx \/ InT y rr) \/ InT y rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  l : tree
  x : X.t
  rl : tree
  rx : X.t
  rr : tree
  y : elt
  l : tree
  H : X.eq y rlx
  ============================
   (X.eq y rlx \/
    (X.eq y x \/ InT y l \/ InT y rl \/ X.eq y rx \/ InT y rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (1) > 
Goal:
  
  l : tree
  x : X.t
  rl : tree
  rx : X.t
  rr : tree
  y : elt
  l : tree
  H : X.eq y rlx
  ============================
   (X.eq y rlx \/
    (X.eq y x \/ InT y l \/ InT y rl \/ X.eq y rx \/ InT y rr)
   /\ InT y rr
  ============================
   (InT y (Node l x rl (max (height l) (height rl) + 1)) \/
    InT y rr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  l : tree
  x : X.t
  rl : tree
  rx : X.t
  rr : tree
  y : elt
  l : tree
  H : X.eq y rlx
  ============================
   (X.eq y rlx \/
    (X.eq y x \/ InT y l \/ InT y rl \/ X.eq y rx \/ InT y rr)
   /\ InT y rr
  ============================
   (InT y (Node l x rl (max (height l) (height rl) + 1)) \/
    InT y rr)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  l : tree
  x : X.t
  rl : tree
  rx : X.t
  rr : tree
  y : elt
  l : tree
  H : X.eq y rlx
  ============================
   (X.eq y rlx \/
    (X.eq y x \/ InT y l \/ InT y rl \/ X.eq y rx \/ InT y rr)
   /\ InT y rr
  ============================
   (InT y (Node l x rl (max (height l) (height rl) + 1)) \/
    InT y rr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (1) > 
Goal:
  
  l : tree
  x : X.t
  rl : tree
  rx : X.t
  rr : tree
  y : elt
  l : tree
  H : X.eq y rlx
  ============================
   (X.eq y
