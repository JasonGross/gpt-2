======== SAMPLE 1 ========
   (In x s)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  x : E.t
  x' : E.t
  Hx : E.eq x x'
  s : t
  s' : t
  Hs : s [<=] s'
  a : elt
  H0 : In a s'
  H1 : E.eq x' a
  ============================
   (In x s)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (2) > 
Goal:
  
  x : E.t
  x' : E.t
  Hx : E.eq x x'
  s : t
  s' : t
  Hs : s [<=] s'
  a : elt
  H0 : In a s'
  H1 : E.eq x' a
  ============================
   (In x s)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (3) > 
Goal:
  
  x : E.t
  x' : E.t
  Hx : E.eq x x'
  s : t
  s' : t
  Hs : s [<=] s'
  a : elt
  H0 : In a s'
  H1 : E.eq x' a
  ============================
   (In x s)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Debug: Level 1: No matching clauses for match.

Debug: Level 1: No matching clauses for match.

Goal:
  
  x : E.t
  x' : E.t
  IH : forall s : t, Ok s -> Ok s' -> subset s s' = true <-> Subset s s'
  H : OrderTac.interp_ord OrdersTac.OEQ x x'
  H3 : ~ (OrderTac.OTE.eq x y)
  H2 : ~ (OrderTac.OTE.eq y x' \/ In y s')
  ============================
   (In y s)


Debug:
Going to execute:
match reverse goal with
| id:(?X1 -> ?X2) -> ?X3
  |- _ =>
      cut X3;
       [ intro; clear id; t_tauto_intuit
       | cut (X1 -> X2);
          [ exact
          id
          | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear id;
             (solve [ t_tauto_intuit ]) ] ]
| id:~ ?X1 -> ?X3
  |- _ =>
      cut X3;
       [ intro; clear id; t_tauto_intuit
       | cut (~ X1);
          [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
| |- ?X1 =>
      <Coq.Init.Tauto.is_disj> flags X1; (solve
       [ left; t_tauto_intuit | right; t_tauto_intuit ])
end ||
  match goal with
  | |- _ -> _ => intro; t_tauto_intuit
  | |- _ => t_reduce; t_solver
  end || t_solver


TcDebug (1) > 
Goal:
  
  x : E.t
  x' : E.t
  IH : for
