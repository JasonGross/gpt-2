======== SAMPLE 1 ========
 env; QCauchySeq xn Pos.to_nat) d') =
              match pnd n with
             | nil => cut (~ [<n>%signature%list]
             | p => true
             | q => false
             end)
            | p => true
             end)
  d | p => true
            end)
  Hm | ?c => match cmul φ (p) with
                        (mkmult φ (p) + - k)
                          (mul_le_mono_no_l φ (m) φ (m) - p)
                            (k = - p)
                           (p < l)
                            (k < p)
                              (p <= k)
  ============================
   (p < k - p < l - k < 0)


Debug: Going to execute:
constr:false; constr:true


TcDebug (1) > 
Debug: Evaluated term: false

Debug: Evaluated term: false

Debug: Evaluated term: false

Debug: Evaluated term: true /\ false

Debug: Evaluated term: true /\ false

Debug: Evaluated term: true /\ false

Debug: Evaluated term: true /\ false

Debug: Evaluated term: true /\ false

Debug: Evaluated term: false

Debug: Evaluated term: true /\ false

Debug: Evaluated term: true

Debug: Evaluated term: false

Goal:
  
  R : Type
  rO : R
  rI : R
  radd : R -> R -> R
  rmul : R -> R -> R
  rsub : R -> R -> R
  ropp : R -> R
  rdiv : R -> R -> R
  rinv : R -> R
  req : R -> R -> Prop
  Rsth : Equivalence req
  Reqe : ring_eq_ext radd rmul ropp req
  SRinv_ext : forall p q : R, p == q -> / p == / q
  AFth : almost_field_theory
  ARth := AF_AR AFth : almost_ring_theory 0 1 radd rmul rsub ropp req
  rI_neq_rO := AF_1_neq_0 AFth : ~ 1 == 0
  rdiv_def := AFdiv_def AFth : forall p q : R, p / q == p * / q
  rinv_l := AFinv_l AFth : forall p : R, ~ p == 0 -> / p * p == 1
  eq_trans := Seq_trans R req Rsth
           : forall x y z : R, x == y -> y == z -> x == z
  eq_sym := Seq_sym R req Rsth : forall x y : R, x == y -> y == x
  eq_refl := Seq_refl R req Rsth : forall x : R, x == x
  radd_0_l := ARadd_0_l ARth : forall x : R, 0 + x == x
  radd_comm := ARadd_comm ARth : forall x y : R, x + y == y + x
  radd_assoc := ARadd_assoc ARth : forall x y z :
