======== SAMPLE 1 ========
ause env a
  H2 : eval_tt env a
  ============================
   True


Debug:
Going to execute:
<Coq.Init.Tauto.axioms> flags ||
  match reverse goal with
  | id:(?X1 -> ?X2) -> ?X3
    |- _ =>
        cut X3;
         [ intro; clear id; t_tauto_intuit
         | cut (X1 -> X2);
            [ exact
            id
            | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear
               id; (solve [ t_tauto_intuit ]) ] ]
  | id:~ ?X1 -> ?X3
    |- _ =>
        cut X3;
         [ intro; clear id; t_tauto_intuit
         | cut (~ X1);
            [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
  | |- ?X1 =>
        <Coq.Init.Tauto.is_disj> flags X1; (solve
         [ left; t_tauto_intuit | right; t_tauto_intuit ])
  end ||
    match goal with
    | |- _ -> _ => intro; t_tauto_intuit
    | |- _ => t_reduce; t_solver
    end || t_solver


Debug:
Going to execute:
<Coq.Init.Tauto.simplif> flags;
 <Coq.Init.Tauto.axioms> flags ||
   match reverse goal with
   | id:(?X1 -> ?X2) -> ?X3
     |- _ =>
         cut X3;
          [ intro; clear id; t_tauto_intuit
          | cut (X1 -> X2);
             [ exact
             id
             | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear
                id; (solve [ t_tauto_intuit ]) ] ]
   | id:~ ?X1 -> ?X3
     |- _ =>
         cut X3;
          [ intro; clear id; t_tauto_intuit
          | cut (~ X1);
             [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
   | |- ?X1 =>
         <Coq.Init.Tauto.is_disj> flags X1; (solve
          [ left; t_tauto_intuit | right; t_tauto_intuit ])
   end ||
     match goal with
     | |- _ -> _ => intro; t_tauto_intuit
     | |- _ => t_reduce; t_solver
     end || t_solver


TcDebug (4) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : En
