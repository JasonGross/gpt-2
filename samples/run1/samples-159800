======== SAMPLE 1 ========
   (E.eq t0 x /\ MapsTo t0 e0 m)


Debug:
Going to execute:
<Coq.Init.Tauto.is_unit_or_eq> flags X1; constructor 1


TcDebug (2) > 
Goal:
  
  elt : Type
  m : t elt
  m' : t elt
  x : key
  e : elt
  H : In x m -> False
  H0 : Add x e m m'
  t0 : E.t
  e0 : elt
  l : E.lt t0 x
  H2 : E.eq t0 x
  H3 : e0 = e
  ============================
   (E.eq t0 x /\ MapsTo t0 e0 m)


Debug: Going to execute:
<Coq.Init.Tauto.is_unit_or_eq> flags X1


TcDebug (2) > 
Goal:
  
  elt : Type
  m : t elt
  m' : t elt
  x : key
  e : elt
  H : In x m -> False
  H0 : Add x e m m'
  t0 : E.t
  e0 : elt
  l : E.lt t0 x
  H2 : E.eq t0 x
  H3 : e0 = e
  ============================
   (E.eq t0 x /\ MapsTo t0 e0 m)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_unit_or_eq@0>


TcDebug (3) > 
Goal:
  
  elt : Type
  m : t elt
  m' : t elt
  x : key
  e : elt
  H : In x m -> False
  H0 : Add x e m m'
  t0 : E.t
  e0 : elt
  l : E.lt t0 x
  H2 : E.eq t0 x
  H3 : e0 = e
  ============================
   (E.eq t0 x /\ MapsTo t0 e0 m)


Debug: Going to execute:
<tauto_plugin::is_unit_or_eq@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  m : t elt
  m' : t elt
  x : key
  e : elt
  H : In x m -> False
  H0 : Add x e m m'
  t0 : E.t
  e0 : elt
  l : E.lt t0 x
  H2 : E.eq t0 x
  H3 : e0 = e
  ============================
   (E.eq t0 x /\ MapsTo t0 e0 m)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (2) > 
Goal:
  
  elt : Type
  m : t elt
  m' : t elt
  x : key
  e : elt
  H : In x m -> False
  H0 : Add x e m m'
  t0 : E.t
  e0 : elt
  l : E.lt t0 x
  H2 : E.eq t0 x
  H3 : e0 = e
  ============================
   (E.eq t0 x /\ MapsTo t0 e0 m)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (2) > 
Goal:
  
  elt : Type
  m : t elt
  m' : t elt
  x : key
  e : elt
  H : In x m -> False
  H0 : Add x e m m'
  t0 : E.t
  e0 : elt
  l : E.lt t0 x
  H2 : E.eq t0 x
