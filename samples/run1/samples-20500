======== SAMPLE 1 ========
            (fun (cmp : elt -> elt -> bool) (m1 m2 : t elt)      : EI m1 => match m1 with
         | nil => m1
        end
   | _ => clear eq_foc c
   end
 with do_intro := do_intro := get_ins t o
in
t_tauto : T
  o : option elt
  l : list (X.t * elt)
  ============================
   (Some l = l))


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (5) > 
Debug: Level 5: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f0 : key -> option elt -> option elt' -> option elt''
  f : key -> elt -> option elt' -> option elt''
  mapl : t elt -> t elt''
  mapr : t elt' -> t elt''
  f0_f : forall (x : key) (d : elt) (o : option elt'),
         f x d o = f0 x (Some d) o
  mapl_bst : forall m : t elt, bst m -> bst (mapl m)
  mapr_bst : forall m' : t elt', bst m' -> bst (mapr m')
  mapl_f0 : forall (x : X.t) (m : t elt),
            bst m ->
            find x (mapl m) =
            match find x m with
            | Some d => f0 x (Some d) None
            | None => None
            end
  mapr_f0 : forall (x : X.t) (m' : t elt'),
            bst m' ->
            find x (mapr m') =
            match find x m' with
            | Some d' => f0 x None (Some d')
            | None => None
            end
  f0_compat : forall (x x' : X.t) (o : option elt) (o' : option elt'),
              X.eq x x' -> f0 x o o' = f0 x' o o'
  l1 : t elt
  IH1 : forall y : key,
          bst l1 ->
          bst l2 ->
          In y l1 \/ In y l2 ->
          find y (map2_opt l1 l2') = f0 y (find y l1) (find y l2')
  IH2 : forall y : key,
          bst l2 ->
          bst l1 ->
          bst l2 ->
          In y l2' ->
          find y (map2_opt l1 l2') = f0 y (find y l1) (find y l2')
  y : key
  H0 : bst m2
  H : In y (Node l1 x1 d1 r1 _x)
  H5 : bst l2'
  H7 : find y m2 = find y l2'
  H9 : gt_tree x1 r2'
  H11 :
