======== SAMPLE 1 ========
 Type X.t
  l : list A
  l' : list A
  H : eqA x l'
  H1 : NoDupA eqk (rev l ++ ofA eqke x l)
  H2 : ofA eqk y l -> False
  H3 : ofA eqk x l' -> False
  ============================
   (ofA eqke x l)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (2) > 
Goal:
  
  A : Type
  eqA : relation A
  equ : Equivalence eqA
  f : E.t -> bool
  x : relation A
  y : relation A
  H0 : eqA f x
  x0 : A
  y0 : A
  H1 : NoDupA eqk (rev l ++ ofA eqke x l)
  H2 : ofA eqk y l -> False
  H3 : ofA eqk x l' -> False
  ============================
   (ofA eqke x l)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (3) > 
Goal:
  
  A : Type
  eqA : relation A
  equ : Equivalence eqA
  f : E.t -> bool
  x : relation A
  y : relation A
  H0 : eqA f x
  x0 : A
  y0 : A
  H1 : NoDupA eqk (rev l ++ ofA eqke x l)
  H2 : ofA eqk y l -> False
  H3 : ofA eqk x l' -> False
  ============================
   (ofA eqke x l)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  A : Type
  eqA : relation A
  equ : Equivalence eqA
  f : E.t -> bool
  x : relation A
  y : relation A
  H0 : eqA f x
  x0 : A
  y0 : A
  H1 : NoDupA eqk (rev l ++ ofA eqke x l)
  H2 : ofA eqk y l -> False
  H3 : ofA eqk x l' -> False
  ============================
   (ofA eqke x l)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (2) > 
Goal:
  
  A : Type
  eqA : relation A
  equ : Equivalence eqA
  f : E.t -> bool
  x : relation A
  y : relation A
  H0 : eqA f x
  x0 : A
  y0 : A
  H1 : NoDupA eqk (rev l ++ ofA eqke x l)
  H2 : ofA eqk y l -> False
  H3 : ofA eqk x l' -> False
  ============================
   (ofA eqke x l)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (2) > 
Goal:
  
  A : Type
  eqA : relation A
  equ : Equivalence eqA
  f : E.t -> bool
  x : relation A
  y : relation A
  H0 : eqA f x
  x0 : A
  y0 : A
  H1 : NoDupA eqk (rev l ++ ofA eqke x l)
  H2 : ofA eqk y l -> False
  H3 : ofA eqk x l' -> False
  ============================
   (ofA eqke x l)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (2) > 
Goal
