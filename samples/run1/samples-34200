======== SAMPLE 1 ========
c \/ InT x b \/ X.eq x rx \/ InT x rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (1) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  b : tree
  H : InT x a -> InT x lr \/ InT x rl
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H2 : InT x rl
  H5 : InT x b
  H4 : InT x lr
  ============================
   (X.eq x y \/ InT x b \/ X.eq x rx \/ InT x rr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (2) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  b : tree
  H : InT x a -> InT x lr \/ InT x rl
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H2 : InT x rl
  H5 : InT x b
  H4 : InT x lr
  ============================
   (X.eq x y \/ InT x b \/ X.eq x rx \/ InT x rr)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  b : tree
  H : InT x a -> InT x lr \/ InT x rl
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H2 : InT x rl
  H5 : InT x b
  H4 : InT x lr
  ============================
   (X.eq x y \/ InT x b \/ X.eq x rx \/ InT x rr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (1) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  b : tree
  H : InT x a -> InT x lr \/ InT x rl
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H2 : InT x rl
  H5 : InT x b
  H4 : InT x lr
  ============================
   (X.eq x y \/ InT x b \/ X.eq x rx \/ InT x rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (1) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  b : tree
  H : InT x a -> InT x lr \/ InT x rl
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H2 : InT x rl
  H5 : InT x b
 
