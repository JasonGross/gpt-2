======== SAMPLE 1 ========
 x lr)
  H : X.lt x y
  H1 : InT y lr
  ============================
   (X.lt y x)


Debug: Going to execute:
<Coq.Init.Tauto.not_dep_intros>


TcDebug (3) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = true
  y : elt
  H : X.lt x y
  H1 : InT y lr
  ============================
   (X.lt y x)


Debug:
Going to execute:
repeat
 match goal with
 | |- ?X1 -> ?X2 => intro
 | |- ~ _ => unfold not at 1; intro
 end


TcDebug (4) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = true
  y : elt
  H : X.lt x y
  H1 : InT y lr
  ============================
   (X.lt y x)


Debug:
Going to execute:
match goal with
| |- ?X1 -> ?X2 => intro
| |- ~ _ => unfold not at 1; intro
end


TcDebug (3) > 
Debug: Level 3: No matching clauses for match.

Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = true
  y : elt
  H : X.lt x y
  H1 : InT y lr
  ============================
   (X.lt y x)


Debug:
Going to execute:
repeat
 (match reverse goal with
  | id:?X1
    |- _ => <Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id
  | id:_ <-> _ |- _ => elim id; do 2 intro; clear id
  | id:~ _ |- _ => red in id
  | id:?X1 |- _ => <Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id
  | id0:?X1 -> ?X2, id1:?X1 |- _ => assert X2; [ exact (id0 id1) | clear id0 ]
  | id:?X1 -> ?X2
    |- _ =>
        <Coq.Init.Tauto.is_unit_or_eq> flags X1; cut X2;
         [ intro; clear id | cut X1; [ exact id | constructor 1; fail ] ]
  | id:?X1 -> ?X2
    |- _ => <Coq.Init.Tauto.flatten_contravariant_conj> flags X1 X2 id
  | id:?X1 <-> ?X2 -> ?X3
    |- _ =>
        assert ((X1 -> X2) -> (X2 -> X1) -> X3) by
         (do 2 intro; apply id; split; assumption); clear id
  | id:?X1 -> ?X2
    |- _ => <Coq.Init.Tauto.flatten_contravariant_disj> flags X1 X2 id
  | |- ?X1 => <Coq.Init.Tauto.is_conj> flags X1; split
  | |- _ <-> _ => split
