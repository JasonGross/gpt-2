======== SAMPLE 1 ========
 (x : R) (x0 : P),
       (P - gen_phiPOS1 (x - p) + (P - gen_phiPOS1 (x1 - p)) * 1 +
       pow_pos rmul (env (p - p1) + (P + 1) * gen_phiPOS1 (x - p1))) +
      P2 @ l * pow_pos rmul (0 - (p - p1) + 1 * gen_phiPOS1 (p + p0)) +
      P3 @ l ==
      P2 @ l * pow_pos rmul (0 - (p - p1) + 1 * gen_phiPOS1 (p + p0)) *
      pow_pos rmul (env (p - p1) + (P + 1) * gen_phiPOS1 (p + p0)) + P3 @ l)


Debug: Going to execute:
PEX C p


TcDebug (14) > 
Debug: Evaluated term: (PEX N 4)

Debug: Level 13: evaluation returns
PEX N 4


Debug: Level 12: evaluation returns
PEX N 4


Debug: Level 10: evaluation returns
PEX N 4


Debug: Level 9: Cst t
 has value 
PEX N 4


Goal:
  
  R : Type
  rO : R
  rI : R
  radd : R -> R -> R
  rmul : R -> R -> R
  rsub : R -> R -> R
  ropp : R -> R
  rdiv : R -> R -> R
  rinv : R -> R
  req : R -> R -> Prop
  Rsth : Equivalence req
  Reqe : ring_eq_ext radd rmul ropp req
  SRinv_ext : forall p q : R, p == q -> / p == / q
  AFth : almost_field_theory
  ARth := AF_AR AFth : almost_ring_theory 0 1 radd rmul rsub ropp req
  rI_neq_rO := AF_1_neq_0 AFth : ~ 1 == 0
  rdiv_def := AFdiv_def AFth : forall p q : R, p / q == p * / q
  rinv_l := AFinv_l AFth : forall p : R, ~ p == 0 -> / p * p == 1
  eq_trans := Seq_trans R req Rsth
           : forall x y z : R, x == y -> y == z -> x == z
  eq_sym := Seq_sym R req Rsth : forall x y : R, x == y -> y == x
  eq_refl := Seq_refl R req Rsth : forall x : R, x == x
  radd_0_l := ARadd_0_l ARth : forall x : R, 0 + x == x
  radd_comm := ARadd_comm ARth : forall x y : R, x + y == y + x
  radd_assoc := ARadd_assoc ARth : forall x y z : R, x + (y + z) == x + y + z
  rmul_1_l := ARmul_1_l ARth : forall x : R, 1 * x == x
  rmul_0_l := ARmul_0_l ARth : forall x : R, 0 * x == 0
  rmul_comm := ARmul_comm ARth : forall x y : R, x * y == y * x
  rmul_assoc := ARmul_assoc ARth : forall x y z : R, x * (y * z) == x * y * z
  rdistr_l := ARdistr_l ARth : forall x y z : R, (x + y) * z == x * z + y * z
  ropp_mul_l := ARopp_mul_l ARth : forall x y : R, - (x * y) == - x * y
  ropp_add := ARopp_add ARth : forall x y : R, - (x + y) == - x + - y
  rsub
