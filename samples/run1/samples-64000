======== SAMPLE 1 ========
 : In x s' /\ true = true -> In x (filter f s)
  H5 : In x s -> In x s'
  H6 : In x (filter f s) -> In x (x :: s)
  H1 : In x (filter f s) -> In x s
  H7 : In x s' -> False
  H3 : In x (filter f s)
  H4 : False
  ============================
   False


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (2) > 
Goal:
  
  s : t
  s' : t
  s'' : t
  x : elt
  y : elt
  z : elt
  f : elt -> bool
  H : Proper (E.eq ==> Logic.eq) f
  H0 : In x s -> exists y : elt, In x s /\ false = true -> In x s /\ false = true
  H5 : In x s -> In x s'
  H6 : In x (filter f s) -> In x (x :: s)
  H1 : In x (filter f s) -> In x s
  H7 : In x s' -> False
  H3 : In x (filter f s)
  H4 : False
  ============================
   False


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (3) > 
Goal:
  
  s : t
  s' : t
  s'' : t
  x : elt
  y : elt
  z : elt
  f : elt -> bool
  H : Proper (E.eq ==> Logic.eq) f
  H0 : In x s -> exists y : elt, In x s /\ false = true -> In x s /\ false = true
  H5 : In x s -> In x s'
  H6 : In x (filter f s) -> In x (x :: s)
  H1 : In x (filter f s) -> In x s
  H7 : In x s' -> False
  H3 : In x (filter f s)
  H4 : False
  ============================
   False


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  s : t
  s' : t
  s'' : t
  x : elt
  y : elt
  z : elt
  f : elt -> bool
  H : Proper (E.eq ==> Logic.eq) f
  H0 : In x s -> exists y : elt, In x s /\ false = true -> In x s /\ false = true
  H5 : In x s -> In x s'
  H6 : In x (filter f s) -> In x (x :: s)
  H1 : In x (filter f s) -> In x s
  H7 : In x s' -> False
  H3 : In x (filter f s)
  H4 : False
  ============================
   False


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (2) > 
Goal:
  
  s : t
  s' : t
  s'' : t
  x : elt
  y : elt
  z : elt
  f : elt -> bool
  H : Proper (E.eq ==> Logic.eq) f
  H0 : In x s -> exists y : elt, In x s /\ false = true -> In x s /\ false = true
  H5 : In x s -> In x s'
  H6 : In x (filter f s) -> In x (x :: s)
  H1 : In x (filter f s) -> In x s
  H7 : In x s' -> False
  H3 : In x (filter f s)
  H4 : False
  ============================
   False


Debug
