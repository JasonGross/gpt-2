======== SAMPLE 1 ========
  H : deduce (fst t) (fst a) = None
  H0 : True
  H : eval_tt env t
  H2 : eval_tt env t -> make_conj (eval_tt env) cl -> False
  H3 : False
  H1 : eval_tt env t
  ============================
   False


Debug:
Going to execute:
match goal with
| |- ?X1 -> ?X2 => intro
| |- ~ _ => unfold not at 1; intro
end


TcDebug (1) > 
Debug: Level 1: No matching clauses for match.

Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                   eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
              unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
               deduce t t' = Some u ->
               forall env : Env, eval' env t -> eval' env t' -> eval' env u
  env : Env
  t : (Term' * Annot)%type
  a : (Term' * Annot)%type
  cl : list (Term' * Annot)
  t0 : Term'
  H : deduce (fst t) (fst a) = Some t0
  H0 : unsat t0 = true
  H3 : False
  H1 : eval_tt env t
  ============================
   False


Debug:
Going to execute:
match reverse goal with
| id:?X1
  |- _ => <Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id
| id:_ <-> _ |- _ => elim id; do 2 intro; clear id
| id:~ _ |- _ => red in id
| id:?X1 |- _ => <Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id
| id0:?X1 -> ?X2, id1:?X1 |- _ => assert X2; [ exact (id0 id1) | clear id0 ]
| id:?X1 -> ?X2
  |- _ =>
      <Coq.Init.Tauto.is_unit_or_eq> flags X1; cut X2;
       [ intro; clear id | cut X1; [ exact id | constructor 1; fail ] ]
| id:?X1 -> ?X2
  |- _ => <Coq.Init.Tauto.flatten_contravariant_conj> flags X1 X2 id
| id:?X1 <-> ?X2 -> ?X3
  |- _ =>
      assert ((X1 -> X2) -> (X2 -> X1) -> X3) by
       (do 2 intro; apply id; split; assumption); clear id
| id:?X1 -> ?X2
  |- _ => <Coq.Init.Tauto.flatten_contravariant_disj> flags X1 X2 id
| |- ?X1 => <Coq.Init.Tauto.is_conj> flags X1; split
| |- _ <-> _ => split
| |- ~ _ => red
end; <Coq.Init.Tauto.not_dep_intros>


TcDebug (1) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term
