======== SAMPLE 1 ========
X1 -> ?X2) -> ?X3
  |- _ =>
      assert ((X1 -> X2) -> (X2 -> X1) -> X3) by
       (do 2 intro; apply id; split; assumption); clear id
| id:?X1 -> ?X2
  |- _ => <Coq.Init.Tauto.flatten_contravariant_disj> flags X1 X2 id
| |- ?X1 => <Coq.Init.Tauto.is_conj> flags X1; split
| |- _ <-> _ => split
| |- ~ _ => red
end


TcDebug (0) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H5 : InT x b
  H4 : InT x rl
  H3 : InT x a
  H : InT x lr
  H2 : InT x b
  ============================
   (X.eq x lx \/ InT x lr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H5 : InT x b
  H4 : InT x rl
  H3 : InT x a
  H : InT x lr
  H2 : InT x b
  ============================
   (X.eq x lx \/ InT x lr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H5 : InT x b
  H4 : InT x rl
  H3 : InT x a
  H : InT x lr
  H2 : InT x b
  ============================
   (X.eq x lx \/ InT x lr)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H5 : InT x b
  H4 : InT x rl
  H3 : InT x a
  H : InT x lr
  H2 : InT x b
  ============================
   (X.eq x lx \/ InT x lr)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (1) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.
