======== SAMPLE 1 ========

  R := ?X In ?X16;
        InT x (Tadd x (Bk ll lx lr)) <->
        InT x (Bk ll lx lr) /\ (X.eq x x2 \/ InT x r2)
  IHr2 : Ok r2 ->
         InT x (Bk ll lx lr) <->
         InT x r2
  x : X.t
  y : elt
  H1 : X.eq x y -> InT x lr \/ InT y r2
  H3 : X.eq y x
  H0 : InT y (Bk ll lx lr)
  ============================
   (InT y lr \/ InT y r2)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (5) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  H : InT y r1
  H1 : InT y lr
  H3 : X.eq y x
  H0 : InT y (Bk ll lx lr)
  ============================
   (InT y lr \/ InT y r2)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (5) > 
Debug: Level 5: evaluation returns
<tactic closure>


Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  H : InT y r1
  H1 : InT y lr
  H3 : X.eq y x
  H0 : InT y (Bk ll lx lr)
  ============================
   (InT y lr \/ InT y r2)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (4) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  H : InT y r1
  H1 : InT y lr
  H3 : X.eq y x
  H0 : InT y (Bk ll lx lr)
  ============================
   (InT y lr \/ InT y r2)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (4) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  H : InT y r1
  H1 : InT y lr
  H3 : X.eq y x
  H0 : InT y (Bk ll lx lr)
  ============================
   (InT y lr \/ InT y r2)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (4) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  H : InT y r1
  H1 : InT y lr
  H3 : X.eq y x
  H0 : InT y (Bk ll lx lr)
  ============================
   (InT y lr \/ InT y r2
