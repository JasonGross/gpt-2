======== SAMPLE 1 ========
 returns
<tactic closure>


Goal:
  
  R : Type
  rO : R
  rI : R
  rplus : R -> R -> R
  rtimes : R -> R -> R
  rminus : R -> R -> R
  ropp : R -> R
  req : R -> R -> Prop
  rle : R -> R -> Prop
  rlt : R -> R -> Prop
  sor : SOR 0 1 rplus rtimes rminus ropp req rle rlt
  C : Type
  cO : C
  cI : C
  cplus : C -> C -> C
  ctimes : C -> C -> C
  cminus : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool
  cleb : C -> C -> bool
  phi : C -> R
  E : Type
  pow_phi : BinNums.N -> E
  rpow : R -> E -> R
  addon : SORaddon
  T : Type
  env : PolEnv
  tg : T
  F := fun (x : NFormula) (acc : list (list (NFormula * T))) =>
       if check_inconsistent x then acc else ((x, tg) :: nil) :: acc
    : NFormula -> list (list (NFormula * T)) -> list (list (NFormula * T))
  G := fun x : NFormula => eval_nformula env x -> False : NFormula -> Prop
  IHl : (C * C)%type
  ============================
   (C -> Mon)


Debug: Going to execute:
exact id


TcDebug (1) > 
Debug: Evaluated term: H

Goal:
  
  R : Type
  rO : R
  rI : R
  rplus : R -> R -> R
  rtimes : R -> R -> R
  rminus : R -> R -> R
  ropp : R -> R
  req : R -> R -> Prop
  rle : R -> R -> Prop
  rlt : R -> R -> Prop
  sor : SOR 0 1 rplus rtimes rminus ropp req rle rlt
  C : Type
  cO : C
  cI : C
  cplus : C -> C -> C
  ctimes : C -> C -> C
  cminus : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool
  cleb : C -> C -> bool
  phi : C -> R
  E : Type
  pow_phi : BinNums.N -> E
  rpow : R -> E -> R
  addon : SORaddon
  T : Type
  env : PolEnv
  tg : T
  F := fun (x : NFormula) (acc : list (list (NFormula * T))) =>
       if check_inconsistent x then acc else ((x, tg) :: nil) :: acc
    : NFormula -> list (list (NFormula * T)) -> list (list (NFormula * T))
  G := fun x : NFormula => eval_nformula env x -> False : NFormula -> Prop
  IHl : (C * C)%type
  ============================
   (C -> Mon)


Debug: Going to execute:
<ltac_plugin::exact@0> $1


TcDebug (1) > 
Goal:
  
  R : Type
  rO : R
  rI : R
  rplus : R -> R -> R
  rtimes : R -> R -> R
  rminus : R -> R -> R
  ropp : R -> R
  req : R -> R -> Prop
  rle : R -> R -> Prop
  rlt : R -> R -> Prop
  sor : SOR 0 1 rplus rtimes rminus ropp req rle rlt
  C : Type
  cO : C
  cI : C
  cplus : C -> C -> C
  ctimes : C -> C -> C
  cminus : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool

