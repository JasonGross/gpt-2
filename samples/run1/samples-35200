======== SAMPLE 1 ========
 : Env, eval_clause env (t -> clause) \/ eval_clause env cl' -> eval_clause env c
  env : Env
  a : clause
  f : list clause
  ============================
   (make_conj (eval_tt env) cl \/ make_conj (eval_opt env) f)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (2) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                    eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
                unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
                 deduce t t' = Some u ->
                 forall env : Env, eval' env t -> eval' env t' -> eval' env u
  t : clause
  f : list clause
  IHf : forall (cl : list clause) (env : Env),
        eval_opt_clause env (or_clause cl cl') <->
         ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl'
  cl' : clause
  env : Env
  X : Term -> Prop
  ============================
   (make_conj (eval_tt env) cl \/ make_conj (eval_opt env) f)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                     eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
                 unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
                  deduce t t' = Some u ->
                  forall env : Env, eval' env t -> eval' env t' -> eval' env u
  t : clause
  f : list clause
  IHf : forall (cl : list clause) (env : Env),
        eval_opt_clause env (or_clause cl cl') <->
        ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl'
  cl' : clause
  env : Env
  X : Term -> Prop
  ============================
   (make_conj (eval_tt env) cl \/ make_conj (eval_opt env) f)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj>
