======== SAMPLE 1 ========
2)
  ============================
   (InT y (Bk rl R) (Bk rx rr))


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (2) > 
Goal:
    p : positive
  ============================
   (~ p < -1)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
    p : positive
  ============================
   (~ p < -1)


Debug: Going to execute:
solve [ inversion H ]


TcDebug (1) > 
Goal:
    p : positive
  ============================
   (~ p < -1)


Debug: Going to execute:
inversion H


TcDebug (1) > 
Debug: Going to execute:
not


TcDebug (2) > 
Goal:
    p : positive
  ============================
   (~ p < -1)


Debug: Going to execute:
do 2 intro; applying lt_tree; intro


TcDebug (2) > 
Goal:
    p : positive
  ============================
   (~ p < -1)


Debug: Going to execute:
inversion H


TcDebug (2) > 
Debug: Going to execute:
do 2 intro; applying lt_tree; intro


TcDebug (3) > 
Goal:
    p : positive
  ============================
   (~ p < -1)


Debug: Going to execute:
inversion H


TcDebug (3) > 
Debug: Going to execute:
do 2 intro


TcDebug (2) > 
Debug: Going to execute:
apply lt_tree


TcDebug (3) > 
Goal:
    p : positive
  ============================
   (~ p < -1)


Debug: Going to execute:
inversion H


TcDebug (2) > 
Debug: Going to execute:
apply lt_tree


TcDebug (3) > 
Debug: Going to execute:
try apply linear_tree_l


TcDebug (3) > 
Debug: Going to execute:
solve [ inversion H ]


TcDebug (0) > 
Goal:
    p : positive
  ============================
   (~ p < -1)


Debug: Going to execute:
apply linear_tree_l


TcDebug (3) > 
Debug: Going to execute:
try apply linear_tree_l


TcDebug (0) > 
Goal:
    p : positive
  ============================
   (~ p < -1)


Debug: Going to execute:
apply linear_tree_l


TcDebug (3) > 
Debug: Going to execute:
try apply linear_tree_l


TcDebug (0) > 
Goal:
    p : positive
  ============================
   (~ p < -1)


Debug: Going to execute:
apply linear_tree_l


TcDebug (3) > 
Debug: Going to execute:
try apply linear_tree_l


TcDebug (0) > 
Debug: Going to execute:
try apply linear_tree_l


TcDebug (0) > 
Goal:
    p : positive
  ============================
   (~ p < -1)


Debug: Going to execute:
apply linear_tree_l


TcDebug (3) > 
Debug: Going to execute:
fun $1 => <ltac_plugin::apply_linear_tree@0>


TcDebug (1) > 
Goal:
    p : positive
   ============================
   (~ 1 < 1)


Debug: Going to execute:
apply linear_tree_l


TcDebug (3) > 
Debug: Going to execute:
apply linear_
