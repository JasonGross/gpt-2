======== SAMPLE 1 ========
.r0 == r \/ r == 0
  H4 : r0~0 == r
  H5 : r~0 == r
  ============================
   (r0 == r \/ r~0 == r)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  i : I.t
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (add x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (add x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H1 : InT y (Node i l x' r)
  H4 : r0~0 == r \/ r~0 == r
  H4 : r0~0 == r
  H5 : r~0 == r
  ============================
   (r0 == r \/ r~0 == r)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  i : I.t
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (add x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (add x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H1 : InT y (Node i l x' r)
  H4 : r0~0 == r \/ r~0 == r
  H4 : r0~0 == r
  H5 : r~0 == r
  ============================
   (r0 == r \/ r~0 == r)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  i : I.t
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (add x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (add x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H1 : InT y (Node i l x' r)
  H4 : r0~0 == r \/ r~0 == r
  H4 : r0~0 == r
  H5 : r~0 == r
  ============================
   (r0 == r \/ r~0 == r)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  i : I.t
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (add x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (add x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H1 : InT y (Node i l x' r)
  H4 : r0~0 == r \/ r~0 == r
  H4 : r0~0 == r
