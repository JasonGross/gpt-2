======== SAMPLE 1 ========
  m : t
  H2 : m <= n
  H : m == 0
  ============================
   (m ~= 0)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (2) > 
Goal:
  
  R : forall n : t, 0 == n <-> n == 0
  n : t
  m : t
  H2 : m <= n
  H : m == 0
  ============================
   (m ~= 0)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  R : forall n : t, 0 == n <-> n == 0
  n : t
  m : t
  H2 : m <= n
  H : m == 0
  ============================
   (m ~= 0)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (2) > 
Goal:
  
  R : forall n : t, 0 == n <-> n == 0
  n : t
  m : t
  H2 : m <= n
  H : m == 0
  ============================
   (m ~= 0)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (3) > 
Goal:
  
  R : forall n : t, 0 == n <-> n == 0
  n : t
  m : t
  H2 : m <= n
  H : m == 0
  ============================
   (m ~= 0)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  R : forall n : t, 0 == n <-> n == 0
  n : t
  m : t
  H2 : m <= n
  H : m == 0
  ============================
   (m ~= 0)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (2) > 
Goal:
  
  R : forall n : t, 0 == n <-> n == 0
  n : t
  m : t
  H2 : m <= n
  H : m == 0
  ============================
   (m ~= 0)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (2) > 
Goal:
  
  R : forall n : t, 0 == n <-> n == 0
  n : t
  m : t
  H2 : m <= n
  H : m == 0
  ============================
   (m ~= 0)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  R : forall n : t, 0 == n <-> n == 0
  n : t
  m : t
  H2 : m <= n
  H : m == 0
  ============================
   (m ~= 0)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (2) > 
Goal:
  
  R : forall n : t, 0 == n <-> n == 0
  n : t
  m : t
  H2 : m <= n
  H : m == 0
  ============================
   (m ~= 0)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


