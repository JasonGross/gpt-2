======== SAMPLE 1 ========
:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (4) > 
Goal:
    x : E.t  y : E.t  s1 : t  s2 : t  s3 : t  s4 : t  H0 : E.eq y x
  ============================
   (In x s1 \/ E.eq y x \/ E.eq z y \/ E.eq z x \/ E.eq z x \/ E.eq z x)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (4) > 
Goal:
    x : E.t  y : E.t  s1 : t  s2 : t  s3 : t  s4 : t  H0 : E.eq y x
  ============================
   (In x s1 \/ E.eq y x \/ E.eq z y \/ E.eq z x \/ E.eq z x \/ E.eq z x)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (4) > 
Goal:
    x : E.t  y : E.t  s1 : t  s2 : t  s3 : t  s4 : t  H0 : E.eq y x
  ============================
   (In x s1 \/ E.eq y x \/ E.eq z y \/ E.eq z x \/ E.eq z x \/ E.eq z x)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (5) > 
Goal:
    x : E.t  y : E.t  s1 : t  s2 : t  s3 : t  s4 : t  H0 : E.eq y x
  ============================
   (In x s1 \/ E.eq y x \/ E.eq z y \/ E.eq z x \/ E.eq z x)


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (5) > 
Debug: Level 5: evaluation returns
<tactic closure>


Goal:
    x : E.t  y : E.t  s1 : t  s2 : t  s3 : t  s4 : t  H0 : E.eq y x
  ============================
   (In x s1 \/ E.eq y x \/ E.eq z y \/ E.eq z x \/ E.eq z x)


Debug: Going to execute:
assumption


TcDebug (4) > 
Goal:
    x : E.t  y : E.t  s1 : t  s2 : t  s3 : t  s4 : t  H0 : E.eq y x
  ============================
   (In x s1 \/ E.eq y x \/ E.eq z y \/ E.eq z x \/ E.eq z x)


Debug: Going to execute:
fun => <ltac_plugin::assumption@0>


TcDebug (5) > 
Goal:
    s1 : t  s2 : t  s3 : t  s4 : t  H : In x s1
  ============================
   (_x : E.eq x x \/ E.eq x y \/ E.eq y x \/ E.eq z y \/ E.eq z x)


Debug: Going to execute:
<Coq.Init.Tauto.axioms> flags


TcDebug (2) > 
Goal:
    s1 : t  s2 : t  s3 : t  s4 : t  H : In x s1
  ============================
   (_x : E.eq x x \/ E.eq x y \/ E.eq y x \/ E.eq z y \/ E.eq z x)


Debug:
Going to execute:
fun flags =>
 
