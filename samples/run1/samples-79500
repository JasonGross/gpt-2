======== SAMPLE 1 ========

  rr : tree
  h : I.t
  t : tree
  y : X.t
  rl : tree
  rx : X.t
  rr : tree
  H5 : InT y l
  H0 : InT y rl
  H3 : InT y l
  H : X.eq y x
  H2 : InT y l
  ============================
   (X.eq y x)


Debug:
Going to execute:
match reverse goal with
| id:(?X1 -> ?X2) -> ?X3
  |- _ =>
      cut X3;
       [ intro; clear id; t_tauto_intuit
       | cut (X1 -> X2);
          [ exact
          id
          | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear id;
             (solve [ t_tauto_intuit ]) ] ]
| id:~ ?X1 -> ?X3
  |- _ =>
      cut X3;
       [ intro; clear id; t_tauto_intuit
       | cut (~ X1);
          [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
| |- ?X1 =>
      <Coq.Init.Tauto.is_disj> flags X1; (solve
       [ left; t_tauto_intuit | right; t_tauto_intuit ])
end


TcDebug (1) > 
Goal:
  
  l : tree
  x : X.t
  rl : tree
  rx : X.t
  rr : tree
  H5 : InT y l
  H0 : InT y rl
  H3 : InT y l
  H : InT y rl
  H2 : InT y l
  ============================
   (X.eq y x)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; (solve
 [ left; t_tauto_intuit | right; t_tauto_intuit ])


TcDebug (2) > 
Goal:
  
  l : tree
  x : X.t
  rl : tree
  rx : X.t
  rr : tree
  H5 : InT y l
  H0 : InT y rl
  H3 : InT y l
  H : InT y rl
  H2 : InT y l
  ============================
   (X.eq y x)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (2) > 
Goal:
  
  l : tree
  x : X.t
  rl : tree
  rx : X.t
  rr : tree
  H5 : InT y l
  H0 : InT y rl
  H3 : InT y l
  H : InT y rl
  H2 : InT y l
  ============================
   (X.eq y x)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (3) > 
Goal:
  
  l : tree
  x : X.t
  rl : tree
  rx : X.t
  rr : tree
  H5 : InT y l
  H0 : InT y rl
  H3 : InT y l
  H : InT y rl
  H2 : InT y l
  ============================
   (X.eq y x)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (3) > 
Debug: Level 3
