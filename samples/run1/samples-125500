======== SAMPLE 1 ========
 x y'
  H5 : InT x b
  H4 : InT x lr
  H3 : X.eq x y
  H1 : InT x rl
  H0 : X.eq x y
  ============================
   (InT x lr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (4) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H5 : InT x a
  H : InT x rl
  H2 : X.eq x y
  H1 : X.eq x lx \/ InT x lr
  H7 : InT x rl
  H5 : InT x b
  H4 : InT x lr
  H3 : X.eq x y
  H1 : X.eq x rl
  H0 : X.eq x y
  ============================
   (InT x lr)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (4) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H5 : InT x a
  H : InT x rl
  H2 : X.eq x y
  H1 : X.eq x lx \/ InT x lr
  H7 : InT x rl
  H5 : InT x b
  H4 : InT x lr
  H3 : X.eq x y
  H1 : X.eq x rl
  H0 : X.eq x y
  ============================
   (InT x lr)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (4) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H5 : InT x a
  H : InT x rl
  H2 : X.eq x y
  H1 : X.eq x lx \/ InT x lr
  H7 : InT x rl
  H5 : InT x b
  H4 : InT x lr
  H3 : X.eq x y
  H1 : X.eq x rl
  H0 : X.eq x y
  ============================
   (InT x lr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (5) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H5 : InT x a
  H : InT x rl
  H2 : X.eq x y
  H1 : X.eq x lx \/ InT x lr
  H7 : InT x rl
  H5 : InT x b
  H4 : InT x lr
  H3 : X.eq x y
  H1 : X.eq x rl
  H0 : X.eq x y
  ============================
   (InT x lr)


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (5) > 
Debug:
