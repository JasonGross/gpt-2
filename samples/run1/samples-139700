======== SAMPLE 1 ========
  H : InT y r
  ============================
   (X.eq y x \/ InT y l \/ InT y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (2) > 
Goal:
  
  l : t
  x : X.t
  _x : I.t
  rx : X.t
  rr : tree
  _x0 : I.t
  rll : tree
  rlx : X.t
  rlr : tree
  e : (height (Node _x (Node _x0 rll rlx rlr) rx rr) + 2 <? height l) = false
  e2 : (height (Node _x0 rll rlx rlr) <=? height rr) = false
  y : elt
  H0 : X.eq y rlx
  ============================
   (X.eq y rlx \/
    (X.eq y x \/ InT y l \/ InT y rll) \/ X.eq y rx \/ InT y rlr \/ InT y rr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (3) > 
Goal:
  
  l : t
  x : X.t
  _x : I.t
  rx : X.t
  rr : tree
  _x0 : I.t
  rll : tree
  rlx : X.t
  rlr : tree
  e : (height (Node _x (Node _x0 rll rlx rlr) rx rr) + 2 <? height l) = false
  e2 : (height (Node _x0 rll rlx rlr) <=? height rr) = false
  y : elt
  H0 : X.eq y rlx
  ============================
   (X.eq y rlx \/
    (X.eq y x \/ InT y l \/ InT y rll) \/ X.eq y rx \/ InT y rlr \/ InT y rr)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  l : t
  x : X.t
  _x : I.t
  rx : X.t
  rr : tree
  _x0 : I.t
  rll : tree
  rlx : X.t
  rlr : tree
  e : (height (Node _x (Node _x0 rll rlx rlr) rx rr) + 2 <? height l) = false
  e2 : (height (Node _x0 rll rlx rlr) <=? height rr) = false
  y : elt
  H0 : X.eq y rlx
  ============================
   (X.eq y rlx \/
    (X.eq y x \/ InT y l \/ InT y rll) \/ X.eq y rx \/ InT y rlr \/ InT y rr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (2) > 
Goal:
  
  l : t
  x : X.t
  _x : I.t
  rx : X.t
  rr : tree
  _x0 : I.t
  rll : tree
  rlx : X.t
  rlr : tree
  e : (height (Node _x (Node _x0 rll rlx rlr) rx rr) + 2 <? height l) = false
  e2 : (height (Node _x0 rll rlx rlr) <=? height rr) = false
  y : elt
  H0 : X.eq y rlx
  =========================
