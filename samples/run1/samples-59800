======== SAMPLE 1 ========
 ]  acc : list elt
  C : X.lt k k'
  H0 : X.lt k' k
  ============================
   (None = at_least_one None None ->
    at_least_one (find (elt:=elt') x m) (Some e') = None)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f : option elt -> option elt' -> option elt''
  k : X.t
  e : elt
  m : list (X.t * elt)
  IHm : Sorted (ltk (elt:=elt)) m ->
        forall m' : list (X.t * elt'),
        Sorted (ltk (elt:=elt')) m' ->
        forall x : key, find (elt:=oee') x (combine m m') =
        at_least_one (find (elt:=elt) x m) (find (elt:=elt') x m')
  Hm : Sorted (ltk (elt:=elt)) ((k, e) :: m)
  k' : X.t
  e' : elt'
  m' : list (X.t * elt')
  IHm' : Sorted (ltk (elt:=elt')) m' ->
         forall x : key, find (elt:=oee') x (combine ((k, e) :: m) m') =
         at_least_one (find (elt:=elt) x ((k, e) :: m))
           (find (elt:=elt') x m')
  Hm' : Sorted (ltk (elt:=elt')) ((k', e') :: m')
  x : key
  H1 : Sorted (ltk (elt:=elt)) m
  H2 : HdRel (ltk (elt:=elt)) (k, e) m
  H5 : Sorted (ltk (elt:=elt')) m'
  H6 : HdRel (ltk (elt:=elt')) (k', e') m'
  l : X.lt k k'
  l0 : X.lt k x
  H : X.eq x k'
  H0 : X.lt x k'
  ============================
   (None = at_least_one None None ->
    at_least_one (find (elt:=elt') x m) (Some e') = None)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f : option elt -> option elt' -> option elt''
  k : X.t
  e : elt
  m : list (X.t * elt)
  IHm : Sorted (ltk (elt:=elt)) m ->
        forall m' : list (X.t * elt'),
        Sorted (ltk (elt:=elt')) m' ->
        forall x : key, find (elt:=oee') x (combine m m') =
        at_least_one (find (elt:=elt) x m) (find (elt:=elt') x m')
  Hm : Sorted (ltk (elt:=elt)) ((k, e) :: m)
  k' : X.t
  e' : elt'
  m' : list (X.t * elt')
  IHm' : Sorted (ltk (elt:=elt')) m' ->
        forall
