======== SAMPLE 1 ========
  (In y l1 \/ In y l2')


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x0 : int
  _x : height (Node ll lx ld lr _x0) > height r + 2
  _x1 : height ll >= height lr
  y : key
  H0 : X.eq y lx
  ============================
   (In y l1 \/ In y l2')


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x0 : int
  _x : height (Node ll lx ld lr _x0) > height r + 2
  _x1 : height ll >= height lr
  y : key
  H0 : X.eq y lx
  ============================
   (In y l1 \/ In y l2')


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (3) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x0 : int
  _x : height (Node ll lx ld lr _x0) > height r + 2
  _x1 : height ll >= height lr
  y : key
  H0 : X.eq y lx
  ============================
   (In y l1 \/ In y l2')


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x0 : int
  _x : height (Node ll lx ld lr _x0) > height r + 2
  _x1 : height ll >= height lr
  y : key
  H0 : X.eq y lx
  ============================
   (In y l1 \/ In y l2')


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x0 : int
  _x : height (Node ll lx ld lr _x0) > height r + 2
  _x1 : height ll >= height lr
  y : key
  H0 : X.eq y lx
  ============================
   (In y l1 \/ In y l2')


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
 
