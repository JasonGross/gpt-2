======== SAMPLE 1 ========
Proof k o n \/ ~ is_not_dep_ok); intro;
            Private_OrderTac.Tac.order_rewr x eqn
  | _ => clear eqn
  end


TcDebug (23) > 
Goal:
  
  n : t
  m : t
  p : t
  q : t
  H0 : q * n <= n * p
  H1 : p * n < p * n
  H2 : n < p * n
  H3 : p <= q * n
  ============================
   (p ~= p)


Debug:
Going to execute:
let rec t_tauto_intuit :=
 <Coq.Init.Tauto.simplif> flags;
  <Coq.Init.Tauto.axioms> flags ||
    match reverse goal with
    | id:(?X1 -> ?X2) -> ?X3
      |- _ =>
          cut X3;
           [ intro; clear id; t_tauto_intuit
           | cut (X1 -> X2);
              [ exact
              id
              | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear
                 id; (solve [ t_tauto_intuit ]) ] ]
    | id:~ ?X1 -> ?X3
      |- _ =>
          cut X3;
           [ intro; clear id; t_tauto_intuit
           | cut (~ X1);
              [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
    | |- ?X1 =>
          <Coq.Init.Tauto.is_disj> flags X1; (solve
           [ left; t_tauto_intuit | right; t_tauto_intuit ])
    end ||
      match goal with
      | |- _ -> _ => intro; t_tauto_intuit
      | |- _ => t_reduce; t_solver
      end || t_solver
in
t_tauto_intuit


TcDebug (23) > 
Goal:
  
  n : t
  m : t
  p : t
  q : t
  H0 : q * n <= n * p
  H1 : p * n < p * n
  H2 : n < p * n
  H3 : p <= q * n
  ============================
   (p ~= p)


Debug: Going to execute:
t_tauto_intuit


TcDebug (24) > 
Goal:
  
  n : t
  m : t
  p : t
  q : t
  H0 : q * n <= n * p
  H1 : p * n < p * n
  H2 : n < p * n
  H3 : p <= q * n
  ============================
   (p ~= p)


Debug:
Going to execute:
<Coq.Init.Tauto.simplif> flags;
 <Coq.Init.Tauto.axioms> flags ||
   match reverse goal with
   | id:(?X1 -> ?X2) -> ?X3
     |- _ =>
         cut X3;
          [ intro; clear id; t_tauto_intuit
          | cut (X1 -> X2);
             [ exact
