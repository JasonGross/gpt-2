======== SAMPLE 1 ========
_tree x r
  H12 : lt_tree x1 l2
  H13 : gt_tree x1 r2
  Hx0 : 0 < height (Node _x r1 _2)
  H8 : (c2 =? l2) = false
  X : t_tauto_intuit
  H1 : x = l
  ============================
   (0 > height (Node _x r1 _2) x1)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  l2 : t elt
  x2 : key
  d2 : elt
  r2 : t elt
  _x4 : int
  l2' : t elt
  o2 : option elt
  r2' : t elt
  m2 : t elt
  e1 : split x2 d2 r2 = << l2', o2, r2' >>
  e2 : f x1 d1 o2 = None
  IHt1 : forall y : key,
         bst l1 -> bst l2' -> In y (map2_opt l1 l2') -> In y l1 \/ In y l2'
  IHt0 : forall y : key,
         bst r1 -> bst r2' -> In y (map2_opt r1 r2') -> In y r1 \/ In y r2'
  y : key
  H0 : bst m2
  H' : In y (map2_opt r1 r2')
  H4 : bst l2'
  H5 : bst r2'
  H6 : bst l1
  H7 : bst r1
  H8 : lt_tree x1 l1
  H9 : gt_tree x1 r1
  H : In y r1
  H1 : In y l2' -> In y m2 /\ X.lt y x1
  H2 : In y r2' -> In y m2 /\ X.lt x1 y
  H3 : In y m2 -> X.lt y x1 -> In y l2'
  H10 : In y m2 -> X.lt x1 y -> In y r2'
  ============================
   (0 > height (Node _x r1 _2) x1)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (2) > 
Goal:
  
  elt : Type
  l2 : t elt
  x2 : key
  d2 : elt
  r2 : t elt
  _x4 : int
  l2' : t elt
  o2 : option elt
  r2' : t elt
  m2 : t elt
  e1 : split x2 d2 r2 = << l2', o2, r2' >>
  e2 : f x1 d1 o2 = None
  IHt1 : forall y : key,
         bst l1 -> bst l2' -> In y (map2_opt l1 l2') -> In y l1 \/ In y l2'
  IHt0 : forall y : key,
         bst r1 -> bst r2' -> In y (map2_opt r1 r2') -> In y r1 \/ In y r2'
  y : key
  H0 : bst m2
  H' : In y (map2_opt r1 r2')
  H4 : bst l2'
  H5 : bst r2'
  H6 : bst l1
  H7 : bst r1
  H8 : lt_tree x1 l1
  H9 : gt_tree x1 r1
  H : In y r1
  H1 : In y l2' -> In y m2 /\ X.lt y x1
  H2 : In y r
