======== SAMPLE 1 ========

  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (3) > 
Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (4) > 
Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (3) > 
Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (3) > 
Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (3) > 
Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (4) > 
Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (3) > 
Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (3) > 
Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (3) > 
Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (4) > 
Goal:
  
  ============================
   ((0 < n \/ n == 0) /\ (0 < m \/ m == 0))


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:

