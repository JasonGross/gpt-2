======== SAMPLE 1 ========
 + r
  H2 : X.eq y x -> False
  H1 : X.eq y x
  ============================
   (X.eq y x'
      (X.eq y x) \/ InT y l \/ InT y (Node _x (Node _x rll rlx rlr) rx rr) rr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  R : forall n : t,
         0_n (Node l x d (Node rll (max rll rlx rlr) rx rr) rr) = true ->
         0_n (Node rlx rx d (Node rlr rx rr) rx rr) +
         0_n (Node rlr rx rr) <= 0_n
  ============================
   (X.eq y x'
      (X.eq y x') \/ InT y l \/ InT y (Node _x (Node _x rll rlx rlr) rx rr) rr)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  R : forall n : t,
        0_n (Node l x d (Node rll (max rll rlx rlr) rx rr) rx rr) = true ->
        0_n (Node rlr rx rr) <= 0_n
  ============================
   (X.eq y x'
      (X.eq y x') \/ InT y l \/ InT y (Node _x (Node _x rll rlx rlr) rx rr) rr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  R : forall n : t,
        0_n (Node l x d (Node rll (max rll rlx rlr) rx rr) rx rr) = true ->
        0_n (Node rlr rx rr) <= 0_n
  ============================
   (X.eq y x'
      (X.eq y x') \/ InT y l \/ InT y (Node _x (Node _x rll rlx rlr) rx rr) rr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  R : forall n : t,
        0_n (Node l x d (Node rll (max rll rlx rlr) rx rr) rx rr) = true ->
        0_n (Node rlr rx rr) <= 0_n
  ============================
   (X.eq y x'
      (X.eq y x') \/ InT y l \/ InT y (Node _x (Node _x rll rlx rlr) rx rr) rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  R : forall n : t,
        0_n (Node l x d (Node rll (max rll rlx rlr) rx rr) rx rr) = true ->
        0_n (Node rlr rx rr) <= 0_n
  =================
