======== SAMPLE 1 ========
x2 : X.t) (y : elt),
        Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Rd ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Rd ll lx lr)
  H8 : gt_tree x' r
  H2 : X.eq y x -> False
  H1 : InT y ll
  ============================
   ((InT y ll \/ X.eq y lx \/ InT y lr) \/ X.eq y x' \/ InT y r)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (3) > 
Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok (Rd ll lx lr) ->
        InT y (del x (Rd ll lx lr)) <-> InT y (Rd ll lx lr) /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Rd ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Rd ll lx lr)
  H8 : gt_tree x' r
  H2 : X.eq y x -> False
  H1 : InT y ll
  ============================
   ((InT y ll \/ X.eq y lx \/ InT y lr) \/ X.eq y x' \/ InT y r)


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok (Rd ll lx lr) ->
        InT y (del x (Rd ll lx lr)) <-> InT y (Rd ll lx lr) /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Rd ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Rd ll lx lr)
  H8 : gt_tree x' r
  H2 : X.eq y x -> False
  H1 : InT y ll
  ============================
   ((InT y ll \/ X.eq y lx \/ InT y lr) \/ X.eq y x' \/ InT y r)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (2) > 
Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree

