======== SAMPLE 1 ========
 : (match reverse goal with
  | id:(?X1 -> ?X2) -> ?X3
    |- _ =>
        cut X3;
         [ intro; clear id; t_tauto_intuit
         | cut (X1 -> X2);
         | [ exact
           id
           | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear id;
             (solve [ t_tauto_intuit ]) ] ]
| id:~ ?X1 -> ?X3
  |- _ =>
      cut X3;
       [ intro; clear id; t_tauto_intuit
       | cut (~ X1);
        | [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
| |- ?X1 =>
      <Coq.Init.Tauto.is_disj> flags X1; (solve
       [ left; t_tauto_intuit | right; t_tauto_intuit ])
end


TcDebug (1) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H2 : X.eq x y
  H1 : InT x rl
  H3 : InT x a
  H : InT x lr
  H5 : InT x b
  H4 : InT x lr
  ============================
   (X.eq x lx \/ InT x lr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; (solve
 [ left; t_tauto_intuit | right; t_tauto_intuit ])


TcDebug (2) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H2 : X.eq x y
  H1 : InT x rl
  H3 : InT x a
  H : InT x lr
  H5 : InT x b
  H4 : InT x lr
  ============================
   (X.eq x lx \/ InT x lr)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (2) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H2 : X.eq x y
  H1 : InT x rl
  H3 : InT x a
  H : InT x lr
  H5 : InT x b
  H4 : InT x lr
  ============================
   (X.eq x lx \/ InT x lr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H2 : X.eq x y
  H1 : InT x rl
  H3 : InT x
