======== SAMPLE 1 ========
   (In y l1 \/ In y l2')


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (3) > 
Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f : option elt -> option elt' -> option elt''
  k : X.t
  e : elt
  m : list (X.t * elt)
  IHm : Sorted X.lt m ->
        Failed m
  k' : X.t
  e' : elt'
  m' : list (X.t * elt')
  IHm' : Sorted X.lt m' ->
         Failed m'
  ============================
   (In y l1 \/ In y l2')


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Debug: Level 2: No matching clauses for match.

Debug: Level 2: No matching clauses for match.

Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f : option elt -> option elt' -> option elt''
  k : X.t
  e : elt
  m : list (X.t * elt)
  IHm : Sorted X.lt m ->
        Failed m
  k' : X.t
  e' : elt'
  m' : list (X.t * elt')
  IHm' : Sorted X.lt m' ->
         Failed m'
  ============================
   (In y l1 \/ In y l2')


Debug:
Going to execute:
match reverse goal with
| id:(?X1 -> ?X2) -> ?X3
  |- _ =>
      cut X3;
       [ intro; clear id; t_tauto_intuit
       | cut (X1 -> X2);
          [ exact
          id
          | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear id;
             (solve [ t_tauto_intuit ]) ] ]
| id:~ ?X1 -> ?X3
  |- _ =>
      cut X3;
       [ intro; clear id; t_tauto_intuit
       | cut (~ X1);
          [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
| |- ?X1 =>
      <Coq.Init.Tauto.is_disj> flags X1; (solve
       [ left; t_tauto_intuit | right; t_tauto_intuit ])
end ||
  match goal with
  | |- _ -> _ => intro; t_tauto_intuit
  | |- _ => t_reduce; t_solver
  end || t_solver


TcDebug (2) > 
Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f : option elt -> option elt' -> option elt''
  k : X.t
  e : elt
  m : list (X.t * elt)
  IHm : Sorted X.lt m ->
        Failed m
  k' : X.t
  e' : elt'
  m' : list (X.t * elt')
  IHm' : Sorted X.lt m' ->
         Failed m'
  ============================
   (In y l1 \/ In y l2
