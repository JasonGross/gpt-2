======== SAMPLE 1 ========
         (max (height l) (height rl) + 1))
               1)))))
           (Ring_polynom.PEadd (Ring_polynom.PEopp (Ring_polynom.PEX Q 1))
               (Ring_polynom.PEX Q 2))) ==
             Ring_polynom.Pphi_dev 0 1 Qplus Qmult Qminus Qopp
               (IDphi (R:=Q)) Z.of_N Qpower
                (x :: y :: z :: nil)
                (Ring_polynom.PEopp (Ring_polynom.PEX Q 2))))%Q
  res := nil : list (Q * Ring_polynom.Mon * Ring_polynom.Pol Q)
  res_eq : Ring_polynom.mk_monpol_list 0 1 Qplus Qmult Qminus Qopp Qeq_bool
             (triv_div 0 1 Qeq_bool) list_hyp = res
  thm : (Ring_polynom.PEeval 0 1 Qplus Qmult Qminus Qopp 
            (IDphi (R:=Q)) Z.of_N Qpower
            (x :: y :: z :: nil)
            (Ring_polynom.PEsub (Ring_polynom.PEX Q 2)
               (Ring_polynom.PEX Q 1));
          denum := Ring_polynom.PEc 1;
          condition := nil |} : linear Q
  res_eq0 : Fnorm 0 1 Qplus Qmult Qminus Qopp Qeq_bool
              (FEsub (FEX Q 2) (FEmul (FEX Q 1)) (FEX Q 2))) =
            res0
  res1 := {|
          num := Ring_polynom.PEadd
                  (Ring_polynom.PEmul (Ring_polynom.PEc (-1))
                     (Ring_polynom.PEX Q 2));
           denum := Ring_polynom.PEc 1;
           condition := Ring_polynom.PEc 1 :: nil |} : linear Q
  ============================
   (false = true /\ true = true <-> (FEeval 0 1 Qplus Qmult Qminus Qopp Qeq_bool
         (IDphi (R:=Q)) Z.of_N Qpower (x :: y :: z :: nil)
        (Ring_polynom.PEmul (Ring_polynom.PEc (-1))
                 (Ring_polynom.PEX Q 2))) ==
    false = true /\ true = true -> (FEeval 0 1 Qplus Qmult Qminus Qopp Qeq_bool
         (IDphi (R:=Q)) Z.of_N Qpower (x :: y :: z :: nil)
          (Ring_polynom.PEmul (Ring_polynom.PEc (-1))
              (Ring_polynom.PEX Q 2))) ==
    false = true /\ true = true -> (FEadd (FEsub (FEX Q 1) (FEX Q 2))) (FEsub (FEX Q 3) (FEX Q 4)))
            (FEmul (FEsub (F
