======== SAMPLE 1 ========
0 \/ InT x rl
  H0 : X.eq x lx
  ============================
   ((X.eq x lx \/ InT x lr) \/ InT x rl)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H5 : InT x lr
  H0 : X.eq x lx
  ============================
   ((X.eq x lx \/ InT x lr) \/ InT x rl)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H5 : InT x lr
  H0 : X.eq x lx
  ============================
   ((X.eq x lx \/ InT x lr) \/ InT x rl)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H5 : InT x lr
  H0 : X.eq x lx
  ============================
   ((X.eq x lx \/ InT x lr) \/ InT x rl)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H5 : InT x lr
  H0 : X.eq x lx
  ============================
   ((X.eq x lx \/ InT x lr) \/ InT x rl)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.eq x y -> InT x lr \/ InT x rl
  H5 : InT x lr
  H0 : X.eq x lx
  ============================
   ((X.eq x lx \/ InT x lr) \/ InT x rl)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


T
