======== SAMPLE 1 ========
 option s [<=] s'
  ============================
   (x = s0 /\ e <> x)


Debug: Going to execute:
<Coq.Init.Tauto.is_list> flags X1; elim id


TcDebug (4) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : Inf x s
  C : X.lt x x'
  y : elt
  H5 : X.eq y x' -> X.eq y x' \/ In y s'
  H2 : X.eq y x'
  H4 : X.eq y x'
  H3 : X.eq y x'
  ============================
   (x = s0 /\ e <> x)


Debug: Going to execute:
<Coq.Init.Tauto.is_list> flags X1


TcDebug (4) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : Inf x s
  C : X.lt x x'
  y : elt
  H5 : X.eq y x' -> X.eq y x' \/ In y s'
  H2 : X.eq y x'
  H4 : X.eq y x'
  H3 : X.eq y x'
  ============================
   (x = s0 /\ e <> x)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_list@0>


TcDebug (5) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : Inf x s
  C : X.lt x x'
  y : elt
  H5 : X.eq y x' -> X.eq y x' \/ In y s'
  H2 : X.eq y x'
  H4 : X.eq y x'
  H3 : X.eq y x'
  ============================
   (x = s0 /\ e <> x)


Debug: Going to execute:
<tauto_plugin::is_list@0>


TcDebug (5) > 
Debug: Level 5: evaluation returns
<tactic closure>


Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : Inf x s
  C : X.lt x x'
  y : elt
  H5 : X.eq y x' -> X.eq y x' \/ In y s'
  H2 : X.eq y x'
  H4 : X.eq y x'
  H3 : X.eq y x'
  ============================
   (x = s0 /\ e <> x)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


