======== SAMPLE 1 ========
positive (height l') ++
         l'
  IHp : gt_tree l' o' = o'0
  y : elt
  H1 : TO.lt y x
  H : TO.lt y' x
  ============================
   (False \/ X.eq y x \/ In y l')


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  y : key
  e : elt
  l : t elt
  y0 : key
  d' : elt
  r : t elt
  h : int
  _x : X.lt y0 x
  e1 : X.compare x y0 = GT _x
  H0 : In y r
  H3 : In y (add x e r)
  H2 : X.eq y x
  H1 : In y (add x e r)
  H4 : X.eq y x \/ In y r
  ============================
   (False \/ X.eq y x \/ In y l')


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : key
  y : key
  e : elt
  l : t elt
  y0 : key
  d' : elt
  r : t elt
  h : int
  _x : X.lt y0 x
  e1 : X.compare x y0 = GT _x
  H0 : In y r
  H3 : In y (add x e r)
  H2 : X.eq y x
  H1 : In y (add x e r)
  H4 : X.eq y x \/ In y r
  ============================
   (False \/ X.eq y x \/ In y l')


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  elt : Type
  x : key
  y : key
  e : elt
  l : t elt
  y0 : key
  d' : elt
  r : t elt
  h : int
  _x : X.lt y0 x
  e1 : X.compare x y0 = GT _x
  H0 : In y r
  H3 : In y (add x e r)
  H2 : X.eq y x
  H1 : In y (add x e r)
  H4 : X.eq y x \/ In y r
  ============================
   (False \/ X.eq y x \/ In y l')


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  elt : Type
  x : key
  y : key
  e : elt
  l : t elt
  y0 : key
  d' : elt
  r : t elt
  h : int
  _x : X.lt y0 x
  e1 : X.compare x y0 = GT _x
  H0 : In y r
  H3 : In y (add x e r)
  H2 : X.eq y x
  H1 : In y (add x e r)
  H4 : X.eq y x \/ In y r
  ============================
   (False \/ X.eq y x \/ In y l')


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  elt : Type
  x : key
  y : key
  e : elt
  l : t elt

