======== SAMPLE 1 ========
 : X.t
  r : tree
  x : elt
  y : elt
  z : elt
  H3 : InT y r
  H10 : InT y lr
  H2 : X.eq y x -> False
  H11 : InT y r
  H4 : InT y (Rd (Bk l x l) z) (Bk r)
  H : X.eq y x
  H1 : X.lt y x
  H3 : InT y lr
  ============================
   (InT y lr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (2) > 
Goal:
  
  i : I.t
  l : tree
  x' : X.t
  r : tree
  x : elt
  y : elt
  z : elt
  H1 : X.lt y x
  H3 : InT y r
  H10 : InT y lr
  H2 : X.eq y x -> False
  H11 : InT y r
  H4 : InT y (Rd (Bk l x l) z) (Bk r)
  H : X.eq y x
  H1 : X.lt y x
  H3 : InT y r
  ============================
   (InT y lr)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  i : I.t
  l : tree
  x' : X.t
  r : tree
  x : elt
  y : elt
  z : elt
  H1 : X.lt y x
  H3 : InT y r
  H10 : InT y lr
  H2 : X.eq y x -> False
  H11 : InT y r
  H4 : InT y (Rd (Bk l x l) z) (Bk r)
  H : X.eq y x
  H1 : X.lt y x
  H3 : InT y r
  ============================
   (InT y lr)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (2) > 
Goal:
  
  i : I.t
  l : tree
  x' : X.t
  r : tree
  x : elt
  y : elt
  z : elt
  H1 : X.lt y x
  H3 : InT y r
  H10 : InT y lr
  H2 : X.eq y x -> False
  H11 : InT y r
  H4 : InT y (Rd (Bk l x l) z) (Bk r)
  H : X.eq y x
  H1 : X.lt y x
  H3 : InT y r
  ============================
   (InT y lr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (3) > 
Goal:
  
  i : I.t
  l : tree
  x' : X.t
  r : tree
  x : elt
  y : elt
  z : elt
  H1 : X.lt y x
  H3 : InT y r
  H10 : InT y lr
  H2 : X.eq y x -> False
  H11 : InT y r
  H4 : InT y (Rd (Bk l x l) z) (Bk r)
  H : X.eq y x
  H1 : X.lt y x
  H3 : InT y r
  ============================
   (InT y lr)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
