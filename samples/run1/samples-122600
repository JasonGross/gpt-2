======== SAMPLE 1 ========
  x : X.t
  e : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x : int
  l' : t elt
  m : (key * elt)%type
  e0 : remove_min ll lx ld lr = (l', m)
  IHp : forall (h : int) (y : key),
        In y (Node ll lx ld lr h) <-> X.eq y ((l', m)#2)#1 \/ In y (l', m)#1
  h : int
  y : key
  H : In y (l', m)#1
  ============================
   (X.eq y x)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (4) > 
Goal:
  
  elt : Type
  x : X.t
  e : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x : int
  l' : t elt
  m : (key * elt)%type
  e0 : remove_min ll lx ld lr = (l', m)
  IHp : forall (h : int) (y : key),
        In y (Node ll lx ld lr h) <-> X.eq y ((l', m)#2)#1 \/ In y (l', m)#1
  h : int
  y : key
  H : In y (l', m)#1
  ============================
   (X.eq y x)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (4) > 
Goal:
  
  elt : Type
  x : X.t
  e : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x : int
  l' : t elt
  m : (key * elt)%type
  e0 : remove_min ll lx ld lr = (l', m)
  IHp : forall (h : int) (y : key),
        In y (Node ll lx ld lr h) <-> X.eq y ((l', m)#2)#1 \/ In y (l', m)#1
  h : int
  y : key
  H : In y (l', m)#1
  ============================
   (X.eq y x)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (5) > 
Goal:
  
  elt : Type
  x : X.t
  e : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  _x : int
  l' : t elt
  m : (key * elt)%type
  e0 : remove_min ll lx ld lr = (l', m)
  IHp : forall (h : int) (y : key),
        In y (Node ll lx ld lr h) <-> X.eq y ((l', m)#2)#1 \/ In y (l', m)#1
  h : int
  y : key
  H : In y (l', m)#1
  ============================
   (X.eq y x)


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (5) > 
Debug: Level 5: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : X.t
  e : el
