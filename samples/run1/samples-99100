======== SAMPLE 1 ========
 rl
  |- _ =>
      assert ((X1 -> X2) -> (X2 -> X1) -> X3) by
       (do 2 intro; apply id; split; assumption); clear id
| id:?X1 -> ?X2
  |- _ => <Coq.Init.Tauto.flatten_contravariant_disj> flags X1 X2 id
| |- ?X1 => <Coq.Init.Tauto.is_conj> flags X1; split
| |- _ <-> _ => split
| |- ~ _ => red
end; <Coq.Init.Tauto.not_dep_intros>


TcDebug (0) > 
Goal:
  
  x : X.t
  ll : tree
  lx : X.t
  lr : tree
  l' : t
  m : elt
  e0 : remove_min ll lx lr = (l', m)
  IHp : forall (h : int) (y : key) (e' : elt),
        MapsTo y e' (Node ll lx ld lr h) <->
        X.eq y m#1 /\ e' = m#2 \/ MapsTo y e' l'
  h : int
  y : key
  e' : elt
  H1 : X.eq y m#1
  H3 : e' = m#2
  H0 : MapsTo y e' (Node ll lx ld lr _x)
  H : MapsTo y e' l'
  H2 : MapsTo y e' l' -> MapsTo y e' (Node ll lx ld lr _x)
  ============================
   (X.eq y m#1 /\ e' = m#2 \/
    MapsTo y e' (Node l' x d r (max (height l') (height r) + 1)))


Debug:
Going to execute:
match reverse goal with
| id:?X1
  |- _ => <Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id
| id:_ <-> _ |- _ => elim id; do 2 intro; clear id
| id:~ _ |- _ => red in id
| id:?X1 |- _ => <Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id
| id0:?X1 -> ?X2, id1:?X1 |- _ => assert X2; [ exact (id0 id1) | clear id0 ]
| id:?X1 -> ?X2
  |- _ =>
      <Coq.Init.Tauto.is_unit_or_eq> flags X1; cut X2;
       [ intro; clear id | cut X1; [ exact id | constructor 1; fail ] ]
| id:?X1 -> ?X2
  |- _ => <Coq.Init.Tauto.flatten_contravariant_conj> flags X1 X2 id
| id:?X1 <-> ?X2 -> ?X3
  |- _ =>
      assert ((X1 -> X2) -> (X2 -> X1) -> X3) by
       (do 2 intro; apply id; split; assumption); clear id
| id:?X1 -> ?X2
  |- _ => <Coq.Init.Tauto.flatten_contravariant_disj> flags X1 X2 id
| |- ?X1 => <Coq.Init.Tauto.is_conj> flags X1; split
| |- _ <-> _ => split
| |- ~ _ => red
end


TcDebug (0) > 
Goal:
  
  x : X.t
  ll : tree
  lx : X.t
  lr : tree
  l' : t
  m : elt
  e0 : remove_min ll lx lr = (l', m)
  IHp : forall (h : int) (y : key) (e' : elt),
   
