======== SAMPLE 1 ========
   make_conj (eval_clause env)
          (fold_left
             (fun (acc : list clause) (e : clause) =>
              match or_clause (p :: t) e with
             | Some cl => cl :: acc
             | None => acc
             end) f nil)
  H4 : True
  H : eval_clause env (p :: t)
  H1 : make_conj (eval_clause env)
         (fold_left
            (fun (acc : list clause) (e : clause) =>
             match or_clause (p :: t) e with
             | Some cl => cl :: acc
             | None => acc
             end) f nil)
  ============================
   ((eval_clause env (p :: t) \/ make_conj (eval_clause env) f) /\ True)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                   eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
              unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
               deduce t t' = Some u ->
               forall env : Env, eval' env t -> eval' env t' -> eval' env u
  env : Env
  p : (Term' * Annot)%type
  t : list (Term' * Annot)
  f : cnf
  H0 : make_conj (eval_clause env)
         (fold_left
            (fun (acc : list clause) (e : clause) =>
             match or_clause (p :: t) e with
             | Some cl => cl :: acc
             | None => acc
             end) f nil) ->
       (eval_clause env (p :: t) \/ make_conj (eval_clause env) f) /\
       make_conj (eval_clause env) nil
  H2 : make_conj (eval_clause env) f ->
       make_conj (eval_clause env) nil ->
       make_conj (eval_clause env)
         (fold_left
            (fun (acc : list clause) (e : clause) =>
             match or_clause (p :: t) e with
             | Some cl => cl :: acc
             | None => acc
     
