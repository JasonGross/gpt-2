======== SAMPLE 1 ========
 In y d
  y0 : key
  H0 : bst l
  H1 : bst r
  H2 : list_hyp (fun x : key => y) (balances (x0, x1) (balances l)); inv_ok
  x : key
  Hs1 : Ok s
  Hs2 : list_hyp (fun x : key => y) (balances (xs, xs0) (balances r)); inv_ok
  ============================
   (list_hyp (fun x : key => y) (balances (xs, xs0) (balances l));
    inv_ok -> False
    x : key
  H : list_hyp (fun x : key => y) (balances (xs, xs0) (balances r)); inv_ok
  x1 : key
  H3 : False
  H4 : list_hyp (fun x : key => y) (balances (xs, xs1) (balances l));
    res := nil : list (fun x : NFormula Z -> Prop Z -> PZiff_op Z  H3 : Zify_Op Z x was not found in the current environment
  ============================
   False


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (2) > 
Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f0 : key -> option elt -> option elt' -> option elt''
  f : key -> elt -> option elt' -> option elt''
  mapl : t elt -> t elt''
  mapr : t elt' -> t elt''
  f0_f : forall (x : key) (d : elt) (o : option elt'),
         f x d o = f0 x (Some d) o
  mapl_bst : forall m : t elt, bst m -> bst (mapl m)
  mapr_bst : forall m' : t elt', bst m' -> bst (mapr m')
  mapl_f0 : forall (x : X.t) (m : t elt),
           bst m ->
           find x (mapl m) =
           match find x m with
           | Some d => f0 x (Some d) None
           | None => None
           end
  mapr_f0 : forall (x : X.t) (m' : t elt'),
           bst m' ->
           find x (mapr m') =
           match find x m' with
           | Some d' => f0 x None (Some d')
           | None => None
           end
  f0_compat : forall (x x' : X.t) (o : option elt) (o' : option elt'),
             X.eq x x' -> f0 x o o' = f0 x' o o'
  l1 : t elt
  x1 : key
  d1 : elt
  r1 : t elt
  _x : int
  l2' : t elt'
  o2 : option elt'
  r2' : t elt'
  m2 : t elt'
  e1 : split x1 m2 = << l2', find x1 m2, r2' >>
  e2 : elt''
  e3 : f x1 d1 (find x1 m2) = Some e2
  IHt1 : forall y : key,
         bst l1 ->
         bst l2' ->
     
