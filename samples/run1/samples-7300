======== SAMPLE 1 ========
X' : X.eq x y -> InT a (Node c1 l1 x1 r1))

Debug: Going to execute:
(match reverse goal with
  | id:?X1
    |- _ => <Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id
  | id:_ <-> _ |- _ => elim id; do 2 intro; clear id
  | id:~ _ |- _ => red in id
  | id:?X1
    |- _ => <Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id
  | id0:?X1 -> ?X2, id1:?X1
    |- _ => assert X2; [ exact (id0 id1) | clear id0 ]
  | id:?X1 -> ?X2
    |- _ =>
        <Coq.Init.Tauto.is_unit_or_eq> flags X1; cut X2;
         [ intro; clear id | cut X1; [ exact id | constructor 1; fail ] ]
  | id:?X1 -> ?X2
    |- _ => <Coq.Init.Tauto.flatten_contravariant_conj> flags X1 X2 id
  | id:?X1 <-> ?X2 -> ?X3
    |- _ =>
        assert ((X1 -> X2) -> (X2 -> X1) -> X3) by
         (do 2 intro; apply id; split; assumption); clear id
  | id:?X1 -> ?X2
    |- _ => <Coq.Init.Tauto.flatten_contravariant_disj> flags X1 X2 id
  | |- ?X1 => <Coq.Init.Tauto.is_conj> flags X1; split
  | |- _ <-> _ => split
  | |- ~ _ => red
  end; <Coq.Init.Tauto.not_dep_intros>)


TcDebug (3) > 
Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f0 : key -> option elt -> option elt' -> option elt''
  f : key -> elt -> option elt' -> option elt''
  mapl : t elt -> t elt''
  mapr : t elt' -> t elt''
  f0_f : forall (x : key) (d : elt) (o : option elt'),
         f x d o = f0 x (Some d) o
  mapl_bst : forall m : t elt, bst m -> bst (mapl m)
  mapr_bst : forall m' : t elt', bst m' -> bst (mapr m')
  mapl_f0 : forall (x : X.t) (m : t elt),
            bst m ->
            find x (mapl m) =
            match find x m with
            | Some d => f0 x (Some d) None
            | None => None
            end
  mapr_f0 : forall (x : X.t) (m' : t elt'),
            bst m' ->
            find x (mapr m') =
            match find x m' with
            | Some d' => f0 x None (Some d')
            | None => None
            end
  f0_compat : forall (x x' : X.t) (o : option elt) (o' : option el
