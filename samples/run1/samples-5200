======== SAMPLE 1 ========

  res : Term'
  s : clause
  H2 : eval' env u * acc
  H3 : make a t0
  H4 : make a t0
  H5 : make a t0
  H6 : make a t0
  H7 : make a t0
  H10 : make l2 x
  H : make l2 x
  ============================
   (l2 x0 x0)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (0) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                     eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
                unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
                 deduce t t' = Some u ->
                 forall env : Env, eval' env t -> eval' env t' -> eval' env u
  a : (Term' * Annot)%type
  cl : list (Term' * Annot)
  IHcl : forall (cl' : clause) (env : Env),
         eval_opt_clause env (or_clause cl cl') <->
         ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl'
  cl' : clause
  env : Env
  c : clause
  H0 : ~ make_conj (eval_tt env) c
  H1 : ~ (eval_tt env) a -> (eval_tt env a /\ make_conj (eval_tt env) cl')
  H2 : eval_tt env a /\ make_conj (eval_tt env) cl -> False
  H3 : eval_tt env a -> False
  H4 : eval_tt env a
  H7 : False
  ============================
   False


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (0) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                     eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
                unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
                 deduce t t' = Some u ->
                 forall env : Env, eval' env t -> eval' env t' -> eval' env u
  a : (Term' * Annot)%type
  cl : list (Term' * Annot)
  IHcl : forall (cl' : clause) (env : Env),
       
