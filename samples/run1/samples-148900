======== SAMPLE 1 ========
   X.eq y rx \/ In y rlr \/ In y rr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (4) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  _x3 : int
  _x0 : height (Node (Node rll rlx rld rlr _x3) rx rd rr _x1) > height l + 2
  _x : height l <= height (Node (Node (Node rll rlx rld rlr _x3) rx rd rr _x1) + 2
  _x2 : height rr < height (Node rll rlx rld rlr _x3)
  y : key
  H : X.eq y rx
  ============================
   (X.eq y rx \/ In y rlr \/ In y rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (4) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  _x3 : int
  _x0 : height (Node (Node rll rlx rld rlr _x3) rx rd rr _x1) > height l + 2
  _x : height l <= height (Node (Node rll rlx rld rlr _x3) rx rd rr _x1) + 2
  _x2 : height rr < height (Node rll rlx rld rlr _x3)
  y : key
  H : X.eq y rx
  ============================
   (X.eq y rx \/ In y rlr \/ In y rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (4) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  _x3 : int
  _x0 : height (Node (Node _x0 rll rlx rld rlr _x3) rx rd rr _x1) > height l + 2
  _x : height l <= height (Node (Node rll rlx rld rlr _x3) rx rd rr _x1) + 2
  _x2 : height rr < height (Node rll rlx rld rlr _x3)
  y : key
  H : X.eq y rx
  ============================
   (X.eq y rx \/ In y rlr \/ In y rr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (5) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  _x3 : int
  _x0 : height (Node (Node rll rl
