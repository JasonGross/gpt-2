======== SAMPLE 1 ========
 : R, x * x == x
  rmul_assoc := ARmul_assoc ARth : forall x y z : R, x * (y * z) == x * y * z
  rdistr_l := ARdistr_l ARth : forall x y z : R, (x + y) * z == x * z + y * z
  ropp_mul_l := ARopp_mul_l ARth : forall x y : R, - (x * y) == - x * y
  ropp_add := ARopp_add ARth : forall x y : R, - (x + y) == - x + - y
  rsub_def := ARsub_def ARth : forall x y : R, x - y == x + - y
  radd_0_r := ARadd_0_r Rsth ARth : forall x : R, x + 0 == x
  rmul_0_r := ARmul_0_r Rsth ARth : forall x : R, x * 0 == 0
  rmul_1_r := ARmul_1_r Rsth ARth : forall x : R, x * 1 == x
  ropp_0 := ARopp_zero Rsth Reqe ARth : - 0 == 0
  rdistr_r := ARdistr_r Rsth Reqe ARth
           : forall x y z : R, z * (x + y) == z * x + z * y
  C : Type
  cO : C
  cI : C
  cadd : C -> C -> C
  cmul : C -> C -> C
  csub : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool
  phi : C -> R
  CRmorph : ring_morph 0 1 radd rmul rsub ropp req 0%coef 1%coef cadd cmul
              csub copp ceqb phi
  phi_0 := morph0 CRmorph : [0] == 0
  phi_1 := morph1 CRmorph : [1] == 1
  Cpow : Type
  Cp_phi : N -> Cpow
  rpow : R -> Cpow -> R
  pow_th : power_theory 1 rmul req Cp_phi rpow
  get_sign : C -> option C
  get_sign_spec : sign_theory copp ceqb get_sign
  cdiv : C -> C -> C * C
  cdiv_th : div_theory req cadd cmul phi cdiv
  rpow_pow := rpow_pow_N pow_th
           : forall (r : R) (n : N), rpow r (Cp_phi n) == pow_N 1 rmul r n
  e1_1 : PExpr C
  e1_2 : PExpr C
  i : positive
  l : list R
  ============================
   (- e1_1 @ l + e1_2 @ l == [e1_1 @ l + e1_2 @ l] * rpow (e2 @ l)


Goal:
  
  R : Type
  rO : R
  rI : R
  radd : R -> R -> R
  rmul : R -> R -> R
  rsub : R -> R -> R
  ropp : R -> R
  rdiv : R -> R -> R
  rinv : R -> R
  req : R -> R -> Prop
  Rsth : Equivalence req
  Reqe : ring_eq_ext radd rmul ropp req
  SRinv_ext : forall p q : R, p == q -> / p == / q
  AFth : almost_field_theory
  ARth := AF_AR AFth : almost_ring_theory 0 1 radd rmul rsub ropp req
  rI_neq_rO := AF_1_neq_0 AFth : ~ 1 == 0
  rdiv_def := AFdiv_def AFth : forall p q : R, p / q == p * / q
  rinv_l := AFinv_
