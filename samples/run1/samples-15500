======== SAMPLE 1 ========
 ma : t elt
  m : t elt
  x : key
  d : elt
  e : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  e1 : X.eq x lx
  e2 : elt
  H : In y lr
  ============================
   (In y ll \/ X.eq x lx \/ In y lr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (2) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  e : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  e1 : X.eq x lx
  e2 : elt
  H : In y lr
  ============================
   (In y ll \/ X.eq x lx \/ In y lr)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  e : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  e1 : X.eq x lx
  e2 : elt
  H : In y lr
  ============================
   (In y ll \/ X.eq x lx \/ In y lr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (1) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  e : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  e1 : X.eq x lx
  e2 : elt
  H : In y lr
  ============================
   (In y ll \/ X.eq x lx \/ In y lr)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (1) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  e : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  e1 : X.eq x lx
  e2 : elt
  H : In y lr
  ============================
   (In y ll \/ X.eq x lx \/ In y lr)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  e : elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  rll : t elt

