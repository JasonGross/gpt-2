======== SAMPLE 1 ========
_clause cl cl'
  cl' : clause
  env : Env
  H : eval_clause env ((env', True) :: x :: cl') <-> ~ eval_clause env ((env', Type'), (tl, tl) :: cl')
  ============================
   ((eval_clause env (a :: cl') -> True) <->
    ~ eval_clause env (a :: cl))


Debug: Going to execute:
<Coq.Init.Tauto.not_dep_intros>


TcDebug (1) > 
Goal:
  
  A : Type
  a : A
  t : list A
  IHt : forall (a : t) (env : Env),
         eval_opt_clause env (or_clause cl cl') <->
         ~ make_conj (eval_tt env) a <->
         ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl')
  a : A
  t0 : list A
  IHt0 : forall (a : t) (env : Env),
         eval_opt_clause env (or_clause cl cl') <->
         ~ make_conj (eval_tt env) a <->
         ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl
  a0 : list A
  ============================
   ((eval_clause env (a :: t0) -> True) <->
    ~ eval_clause env (a :: t0))


Debug:
Going to execute:
repeat
 match goal with
 | |- ?X1 -> ?X2 => intro
 | |- ~ _ => unfold not at 1; intro
 end


TcDebug (2) > 
Goal:
  
  A : Type
  a : A
  t : list A
  IHt : forall (a : t) (env : Env),
         eval_opt_clause env (or_clause cl cl') <->
         ~ make_conj (eval_tt env) a <->
         ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl)
  a0 : list A
  a : A
  t : list A
  IHt : forall (a : t) (env : Env),
         eval_opt_clause env (or_clause cl cl') <->
         ~ make_conj (eval_tt env) a <->
         ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl \/ ~ make_conj (eval_tt env) cl
  a
