======== SAMPLE 1 ========
     Ok r -> InT y (split x r)#l <-> InT y r /\ X.lt y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Bk ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Bk ll lx lr)
  H8 : gt_tree x' r
  H : InT y r
  H1 : InT y r
  H3 : X.lt y x
  H4 : InT y lr
  ============================
   (InT y (Bk ll lx lr) /\ ~ X.eq y x)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (1) > 
Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok (Bk ll lx lr) ->
        InT y (split x lr)#l <-> InT y (split x lr)#l /\ X.lt y x
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (split x r)#l <-> InT y r /\ X.lt y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Bk ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Bk ll lx lr)
  H8 : gt_tree x' r
  H : InT y r
  H1 : InT y r
  H3 : X.lt y x
  H4 : InT y lr
  ============================
   (InT y (Bk ll lx lr) /\ ~ X.eq y x)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (2) > 
Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok (Bk ll lx lr) ->
        InT y (split x lr)#l <-> InT y (split x lr)#l /\ X.lt y x
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (split x r)#l <-> InT y r /\ X.lt y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Bk ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Bk ll lx lr)
  H8 : gt_tree x' r
  H : InT y r
  H1 : InT y r
  H3 : X.lt y x
  H4 : InT y lr
  ============================
   (InT y (Bk ll lx lr) /\ ~ X.eq y x)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
    
