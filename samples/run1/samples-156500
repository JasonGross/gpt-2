======== SAMPLE 1 ========

  y : key
  d' : elt
  r : t elt
  h : int
  _x : X.lt x y
  e1 : X.compare x y = LT _x
  H3 : X.eq y x
  H0 : In y (add x e l)
  H : In y l
  H2 : In y (add x e l)
  H3 : X.eq y x
  ============================
   (X.eq y x)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  y : key
  e : elt
  l : t elt
  y0 : key
  d' : elt
  r : t elt
  h : int
  _x : X.lt y0 x
  e1 : X.compare x y = LT _x
  H0 : In y (add x e l)
  H : In y l
  H2 : In y (add x e l)
  H3 : X.eq y x
  ============================
   (X.eq y x)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  y : key
  e : elt
  l : t elt
  y0 : key
  d' : elt
  r : t elt
  h : int
  _x : X.lt y0 x
  e1 : X.compare x y = LT _x
  H0 : In y (add x e l)
  H : In y l
  H2 : In y (add x e l)
  H3 : X.eq y x
  ============================
   (X.eq y x)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  y : key
  e : elt
  l : t elt
  y0 : key
  d' : elt
  r : t elt
  h : int
  _x : X.lt y0 x
  e1 : X.compare x y = LT _x
  H0 : In y (add x e l)
  H : In y l
  H2 : In y (add x e l)
  H3 : X.eq y x
  ============================
   (X.eq y x)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (3) > 
Goal:
  
  elt : Type
  x : key
  y : key
  e : elt
  l : t elt
  y0 : key
  d' : elt
  r : t elt
  h : int
  _x : X.lt y0 x
  e1 : X.compare x y = LT _x
  H0 : In y (add x e l)
  H : In y l
  H2 : In y (add x e l)
  H3 : X.eq y x
  ============================
   (X.eq y x)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : key
  y : key
  e : elt
  l : t elt
  y0 : key
  d' : elt
  r : t elt
  h : int
  _x : X.lt y0 x
  e1 : X.compare x y = GT _x
  H0 : In y (add x e l)
  H : In y l
  H2 : In y (add x e
