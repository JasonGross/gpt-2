======== SAMPLE 1 ========
 1
  H3 : InT x rl
  ============================
   (InT x rl \/ X.eq x rx \/ InT x rr)


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.lt x y -> InT x lr \/ InT x rl
  H5 : InT x b
  H4 : InT x rl
  H2 : InT x b
  ============================
   (InT x rl \/ X.eq x rx \/ InT x rr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.lt x y -> InT x lr \/ InT x rl
  H5 : InT x b
  H4 : InT x rl
  H2 : InT x b
  ============================
   (InT x rl \/ X.eq x rx \/ InT x rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.lt x y -> InT x lr \/ InT x rl
  H5 : InT x b
  H4 : InT x rl
  H2 : InT x b
  ============================
   (InT x rl \/ X.eq x rx \/ InT x rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.lt x y -> InT x lr \/ InT x rl
  H5 : InT x b
  H4 : InT x rl
  H2 : InT x b
  ============================
   (InT x rl \/ X.eq x rx \/ InT x rr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (4) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H1 : X.lt x y -> InT x lr \/ InT x rl
  H5 : InT x b
  H4 : InT x rl
  H2 : InT x b
  ============================
   (InT x rl \/ X.eq x rx \/ InT x rr)


Debug: Going to execute:
<tauto_plugin::is_empty@0>


