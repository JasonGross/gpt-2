======== SAMPLE 1 ========

  IHm2 : forall s : list (Env R),
         mem x (inter l s') = true <-> mem x s = true /\ mem x s' = true
  s0 : Env R
  H : false = true
  H0 : false = true
  ============================
   (false = true)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  x : positive
  IHx : forall s s' : list (Env R),
        mem x (inter l s') = true <-> mem x s = true /\ mem x s' = true
  s0 : Env R
  H : false = true
  H0 : false = true
  ============================
   (false = true)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  x : positive
  IHx : forall s s' : list (Env R),
        mem x (inter l s') = true <-> mem x s = true /\ mem x s' = true
  s0 : Env R
  H : false = true
  H0 : false = true
  ============================
   (false = true)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  x : positive
  IHx : forall s s' : list (Env R),
        mem x (inter l s') = true <-> mem x s = true /\ mem x s' = true
  s0 : Env R
  H : false = true
  H0 : false = true
  ============================
   (false = true)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  x : positive
  IHx : forall s s' : list (Env R),
        mem x (inter l s') = true <-> mem x s = true /\ mem x s' = true
  s0 : Env R
  H : false = true
  H0 : false = true
  ============================
   (false = true)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (1) > 
Goal:
  
  x : positive
  IHx : forall s s' : list (Env R),
        mem x (inter l s') = true <-> mem x s = true /\ mem x s' = true
  s0 : Env R
  H : false = true
  H0 : false = true
  ============================
   (false = true)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  x : positive
  IHx : forall s s' : list (Env R),
        mem x (inter l s') = true <-> mem x s = true /\ mem x s' = true
  s0 : Env R
  H : false = true
  H0 : false = true
  ============================
   (false = true)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  x : positive
  IHx : forall s s' : list (Env R),
        mem x (
