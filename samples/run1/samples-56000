======== SAMPLE 1 ========

t_tauto_intuit ])
  
  ============================
   (forall (e : A) (t : A) (e0 : t) (e' : t) (e1 : t) 
       (fun _ : elt => if t_in0 e = a /\ ~ InA eqke (fdec (fdec (f0_eq_replace_1 (cmon (bt ub e) cmon i b) ub1)
        then Some b
        else Some b)


Goal:
  
  A : Type
  equiv0 : Equivalence eq
  H : EqDec A eq
  B : Type
  equiv1 : Equivalence eq
  H0 : EqDec B eq
  y : A
  b : A
  H1 : forall x y : A, b <=> x -> InA x (fdec (fdec (f0_eq_replace_1 (cmon (bt ub e) b)))
  H2 : InA x (fdec (fdec (f0_eq_replace_1 (cmon (bt ub e) b))) -> False
  x : A
  H3 : InA x (fdec (f0_eq_replace_1 (cmon (bt ub e) b))) /\ ~ InA x (fdec (f0_eq_replace_1 cmon (bt ub e) b)))
  ============================
   (InA x (fdec (f0_eq_replace_1 (cmon (bt ub e) b))) /\ ~ InA x (fdec (f0_eq_replace_1 cmon (bt ub e) b)))


Debug:
Going to execute:
fun flags =>
  <Coq.Init.Tauto.not_dep_intros>;
   repeat
    (match reverse goal with
     | id:?X1
       |- _ =>
           <Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id
     | id:_ <-> _ |- _ => elim id; do 2 intro; clear id
     | id:~ _ |- _ => red in id
     | id:?X1
       |- _ => <Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id
     | id0:?X1 -> ?X2, id1:?X1
       |- _ => assert X2; [ exact (id0 id1) | clear id0 ]
     | id:?X1 -> ?X2
       |- _ =>
           <Coq.Init.Tauto.is_unit_or_eq> flags X1; cut X2;
            [ intro; clear id | cut X1; [ exact id | constructor 1; fail ] ]
     | id:?X1 -> ?X2
       |- _ => <Coq.Init.Tauto.flatten_contravariant_conj> flags X1 X2 id
     | id:?X1 <-> ?X2 -> ?X3
       |- _ =>
           assert ((X1 -> X2) -> (X2 -> X1) -> X3) by
            (do 2 intro; apply id; split; assumption); clear id
     | id:?X1 -> ?X2
       |- _ => <Coq.Init.Tauto.flatten_contravariant_disj> flags X1 X2 id
     | |- ?X1 => <Coq.Init.Tauto.is_conj> flags X1; split
     | |- _ <-> _ => split
     | |- ~ _ => red
     end; <Coq.Init.Tauto.not_dep_intros>)


TcDebug
