======== SAMPLE 1 ========
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                     eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
                unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
                 deduce t t' = Some u ->
                 forall env : Env, eval' env t -> eval' env t' -> eval' env u
  env : Env
  a : clause
  f : list clause
  IHf : forall f' : cnf,
        eval_cnf env (or_cnf f f') <-> eval_cnf env f \/ eval_cnf env f'
  f' : cnf
  H : eval_cnf env f
  H0 : eval_cnf env f'
  ============================
   (eval_cnf env f')


Debug: Going to execute:
<Coq.Init.Tauto.is_unit_or_conj> flags X1


TcDebug (1) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                    eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
               unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
                deduce t t' = Some u ->
                forall env : Env, eval' env t -> eval' env t' -> eval' env u
  env : Env
  a : clause
  f : list clause
  IHf : forall f' : cnf,
        eval_cnf env (or_cnf f f') <-> eval_cnf env f \/ eval_cnf env f'
  f' : cnf
  H : eval_cnf env f
  H0 : eval_cnf env f'
  ============================
   (eval_cnf env f')


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_unit_or_conj@0>


TcDebug (2) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                    eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
               unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u :
