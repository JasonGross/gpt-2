======== SAMPLE 1 ========
 2) -> eval_cnf eval_nformula env (eval_nformula env a /\ make_conj (eval_nformula env) cl)
  ============================
   (make_conj (eval_nformula env) x)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  A : Type
  a : A
  eval : A -> Prop
  no_middle_eval : forall d : A, eval d \/ ~ eval d
  H : make_conj (eval_tt env) a -> False
  H0 : make_conj (eval_tt env) a
  ============================
   (make_conj (eval_nformula env) x)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  A : Type
  a : A
  eval : A -> Prop
  no_middle_eval : forall d : A, eval d \/ ~ eval d
  H : make_conj (eval_tt env) a -> False
  H0 : make_conj (eval_tt env) a
  ============================
   (make_conj (eval_nformula env) x)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (1) > 
Goal:
  
  A : Type
  a : A
  eval : A -> Prop
  no_middle_eval : forall d : A, eval d \/ ~ eval d
  H : make_conj (eval_tt env) a -> False
  H0 : make_conj (eval_tt env) a
  ============================
   (make_conj (eval_nformula env) x)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  A : Type
  a : A
  eval : A -> Prop
  no_middle_eval : forall d : A, eval d \/ ~ eval d
  H : make_conj (eval_tt env) a -> False
  H0 : make_conj (eval_tt env) a
  ============================
   (make_conj (eval_nformula env) x)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  A : Type
  a : A
  eval : A -> Prop
  no_middle_eval : forall d : A, eval d \/ ~ eval d
  H : make_conj (eval_tt env) a -> False
  H0 : make_conj (eval_tt env) a
  ============================
   (make_conj (eval_nformula env) x)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  A : Type
  a : A
  eval : A -> Prop
  no_middle_eval : forall d : A, eval d \/ ~ eval d
  H : make_conj (eval_tt env) a -> False
  H0 : make_conj (eval_tt env) a
  ============================
   (make_conj (eval_nformula env) x)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  A : Type
  a : A
  eval : A -> Prop
  no_middle_eval : forall d : A, eval d \/ ~ eval d
  H : make_conj
