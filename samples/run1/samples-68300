======== SAMPLE 1 ========
; t_tauto_intuit
      | cut (X1 -> X2);
         [ intro; clear id; t_tauto_intuit
         | cut (X1 -> X2);
            [ exact
            id
            | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear id;
               id; (solve [ t_tauto_intuit ]) ] ]
  | id:~ ?X1 -> ?X3
    |- _ =>
        cut X3;
         [ intro; clear id; t_tauto_intuit
         | cut (~ X1);
            [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
  | |- ?X1 =>
        <Coq.Init.Tauto.is_disj> flags X1; (solve
         [ left; t_tauto_intuit | right; t_tauto_intuit ])
  end ||
    match goal with
    | |- _ -> _ => intro; t_tauto_intuit
    | |- _ => t_reduce; t_solver
    end || t_solver


TcDebug (1) > 
Goal:
    l : t  x : predicate l
  ============================
   (forall (s : t) (x : tr),
     x = tr - (height s) + 1 ->
    0 <= height l + 2 ->
    forall (x : X.t) (m : t) (n : t),
     0 <= Pos.pred m + - x -> 0 <= Pos.pred m + - n ->
    forall (n : t) (x : X.t) (n : t),
     (x + 0 <= n * x -> 0 <= Pos.pred n * x) < (x + n) ->
    forall (m : t) (x : X.t) (n : t),
     (x + 0 <= m < - x -> - n * x <= m) -> (x - m) /\ Pos.pred x /\ Pos.pred x) ->
    mkHyp_tac C req lH


Debug:
Going to execute:
<Coq.Init.Tauto.simplif> flags;
 <Coq.Init.Tauto.axioms> flags ||
   match reverse goal with
   | id:(?X1 -> ?X2) -> ?X3
     |- _ =>
         cut X3;
          [ intro; clear id; t_tauto_intuit
         | cut (X1 -> X2);
            [ exact
            id
            | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear
               id; (solve [ t_tauto_intuit ]) ] ]
   | id:~ ?X1 -> ?X3
     |- _ =>
         cut X3;
          [ intro; clear id; t_tauto_intuit
         | cut (~ X1);
            [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
   | |- ?X1 =>
         <Coq.Init.Tauto.is_disj> flags X1; (solve
        
