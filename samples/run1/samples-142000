======== SAMPLE 1 ========
0 acc)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (1) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  rl : t elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  _x0 : height (Node rl rx rd rr _x1) > height l + 2
  _x : height l <= height (Node rl rx rd rr _x1) + 2
  _x2 : height rr >= height rl
  y : key
  H : In y l
  ============================
   (X.eq y x \/ In y l \/ In y (Node rl rx rd rr _x1))


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  rl : t elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  _x0 : height (Node rl rx rd rr _x1) > height l + 2
  _x : height l <= height (Node rl rx rd rr _x1) + 2
  _x2 : height rr >= height rl
  y : key
  H : In y l
  ============================
   (X.eq y x \/ In y l \/ In y (Node rl rx rd rr _x1))


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  rl : t elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  _x0 : height (Node rl rx rd rr _x1) > height l + 2
  _x : height l <= height (Node rl rx rd rr _x1) + 2
  _x2 : height rr >= height rl
  y : key
  H : In y l
  ============================
   (X.eq y x \/ In y l \/ In y (Node rl rx rd rr _x1))


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  rl : t elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  _x0 : height (Node rl rx rd rr _x1) > height l + 2
  _x : height l <= height (Node rl rx rd rr _x1) + 2
  _x2 : height rr >= height rl
  y : key
  H : In y l
  ============================
   (X.eq y x \/ In y l \/ In y (Node rl rx rd rr _x1))


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  elt : Type
  l : t elt
  x : key
  d : elt
  rl : t elt
  rx : key
  rd : elt
  rr : t elt
  _x1 : int
  _x0 : height (Node rl rx r
