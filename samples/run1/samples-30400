======== SAMPLE 1 ========
 R; QCauchySeq zn Pos.to_nat (3 * k) == - (3 * k) * 10 ^ usize d)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (6) > 
Goal:
  
  d : uint
  IHd : forall n : nat,
        Nat.of_uint_acc d n = of_lu (rev d) + n * 10 ^ usize d
  n : nat
  ============================
   (of_lu (rev d) + (1 + 10 * n) * 10 ^ usize d =
    of_lu (rev d) + 1 * 10 ^ usize d + n * (10 * n))


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (6) > 
Debug: Level 6: evaluation returns
<tactic closure>


Goal:
  
  d : uint
  IHd : forall n : nat,
        Nat.of_uint_acc d n = of_lu (rev d) + n * 10 ^ usize d
  n : nat
  ============================
   (of_lu (rev d) + (1 + 10 * n) * 10 ^ usize d =
    of_lu (rev d) + 1 * 10 ^ usize d + n * (10 * n))


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (5) > 
Goal:
  
  d : uint
  IHd : forall n : nat,
        Nat.of_uint_acc d n = of_lu (rev d) + n * 10 ^ usize d
  n : nat
  ============================
   (of_lu (rev d) + (1 + 10 * n) * 10 ^ usize d =
    of_lu (rev d) + 1 * 10 ^ usize d + n * (10 * n))


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (5) > 
Goal:
  
  d : uint
  IHd : forall n : nat,
        Nat.of_uint_acc d n = of_lu (rev d) + n * 10 ^ usize d
  n : nat
  ============================
   (of_lu (rev d) + (1 + 10 * n) * 10 ^ usize d =
    of_lu (rev d) + 1 * 10 ^ usize d + n * (10 * n))


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (5) > 
Goal:
  
  d : uint
  IHd : forall n : nat,
        Nat.of_uint_acc d n = of_lu (rev d) + n * 10 ^ usize d
  n : nat
  ============================
   (of_lu (rev d) + (1 + 10 * n) *10 ^ usize d =
    of_lu (rev d) + 1 * 10 ^ usize d + n * (10 * n))


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (5) > 
Goal:
  
  d : uint
  IHd : forall n : nat,
        Nat.of_uint_acc d n = of_lu (rev d) + n * 10 ^ usize d
  n : nat
  ============================
   (of_lu (rev d) + (1 + 10 * n) * 10 ^ usize d =
    of_lu (rev d) + 1 * 10 ^ usize d + n * (10 * n))


Debug: Going to execute:
fun
