======== SAMPLE 1 ========
TcDebug (2) > 
Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  rl : tree
  rx : X.t
  rr : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (del x l) <-> InT y l /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok (Rd rl rx rr) ->
        InT y (del x (Rd rl rx rr)) <-> InT y (Rd rl rx rr) /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x' x
  H5 : Ok l
  H6 : Ok (Rd rl rx rr)
  H7 : lt_tree x' l
  H8 : gt_tree x' (Rd rl rx rr)
  H1 : InT y (Rd rl rx rr)
  H : X.eq y x
  ============================
   False


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (3) > 
Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  rl : tree
  rx : X.t
  rr : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (del x l) <-> InT y l /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok (Rd rl rx rr) ->
        InT y (del x (Rd rl rx rr)) <-> InT y (Rd rl rx rr) /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x' x
  H5 : Ok l
  H6 : Ok (Rd rl rx rr)
  H7 : lt_tree x' l
  H8 : gt_tree x' (Rd rl rx rr)
  H1 : InT y (Rd rl rx rr)
  H : X.eq y x
  ============================
   False


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  rl : tree
  rx : X.t
  rr : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (del x l) <-> InT y l /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok (Rd rl rx rr) ->
        InT y (del x (Rd rl rx rr)) <-> InT y (Rd rl rx rr) /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x' x
  H5 : Ok l
  H6 : Ok (Rd rl rx rr)
  H7 : lt_tree x' l
  H8 : gt_tree x' (Rd rl rx rr)
  H1 : InT y (Rd rl rx rr)
  H : X.eq y x
  ============================
   False


Debug:
Going to execute:
<
