======== SAMPLE 1 ========
 r0 -> eqr r1 y0) (mapr r0 r1)
  f0_f : forall (x : X.t) (d : elt) (o : option elt'),
           f x d o = f0 x (Some d) o
  l1 : t elt
  x1 : key
  d1 : elt
  r1 : t elt
  _x : int
  l2' : t elt'
  r2' : t elt'
  m2 : t elt'
  e1 : split x1 m2 = << l2', find x1 m2, r2' >>
  e2 : elt''
  e3 : f x1 d1 r1 = None
  H0 : bst m2
  H1 : bst l1
  H2 : bst r1
  H : forall y : key, In y l2' <-> In y r2' /\ X.lt y x1
  H3 : forall y : key, In y (Node l2' (Node r2')) <-> In y l2'
  H0' : bst m2
  H4 : bst r1
  l : X.lt y x1
  H5 : bst l2'
  H6 : bst r2'
  l0' : t elt''
  e2 : f0 x1 d1 r1 = None
  H7 : In y m2 -> False
  H7' : bst l2' -> t elt''
  H11 : In y r1
  H8 : In y m2
  H9 : In y l2' -> False
  H13 : In y m2
  ============================
   (In y (Node l2' (Node r2'))
    (In y (Node r1)
     (In y (Node r0) -> False
       (Node r0) -> False
      (Node r1))


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (1) > 
Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f0 : key -> option elt -> option elt' -> option elt''
  f : key -> elt -> option elt' -> option elt''
  mapl : t elt -> t elt''
  mapr : t elt' -> t elt''
  f0_f : forall (x : key) (d : elt) (o : option elt'),
         f x d o = f0 x (Some d) o
  mapl_bst : forall m : t elt, bst m -> bst (mapl m)
  mapr_bst : forall m' : t elt', bst m' -> bst (mapr m')
  mapl_f0 : forall (x : X.t) (m : t elt),
            bst m ->
            find x (mapl m) =
            match find x m with
            | Some d => f0 x (Some d) None
            | None => None
            end
  mapr_f0 : forall (x : X.t) (m' : t elt'),
            bst m' ->
            find x (mapr m') =
            match find x m' with
            | Some d' => f0 x None (Some d')
            | None => None
            end
  f0_compat : forall (q : t elt) (e : elt) (o : option elt'),
       
