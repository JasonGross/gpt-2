======== SAMPLE 1 ========


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok (Bk ll lx lr) ->
        InT y (del x (Bk ll lx lr)) <-> InT y (Bk ll lx lr) /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Bk ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Bk ll lx lr)
  H8 : gt_tree x' r
  H : InT y r
  H1 : X.eq y x
  H2 : Ok (Bk ll lx lr)
  H3 : Ok (Bk rl rx rr)
  ============================
   (X.eq y x')


Debug:
Going to execute:
<Coq.Init.Tauto.flatten_contravariant_disj> flags X1 X2 id


TcDebug (4) > 
Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok (Bk ll lx lr) ->
        InT y (del x (Bk ll lx lr)) <-> InT y (Bk ll lx lr) /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Bk ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Bk ll lx lr)
  H8 : gt_tree x' r
  H : InT y r
  H1 : X.eq y x
  H2 : Ok (Bk ll lx lr)
  H3 : Ok (Bk rl rx rr)
  ============================
   (X.eq y x')


Debug:
Going to execute:
fun tauto_flags X1 X2 id => <tauto_plugin::flatten_contravariant_disj@0>


TcDebug (5) > 
Goal:
  
  i : Color.t
  ll : tree
  lx : X.t
  lr : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok (Bk ll lx lr) ->
        InT y (del x (Bk ll lx lr)) <-> InT y (Bk ll lx lr) /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Bk ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Bk ll l
