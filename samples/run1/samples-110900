======== SAMPLE 1 ========
 key.

Goal:
  
  ============================
   (NoDupA (nth 0 a0 : A) :: nth 0 a0 l ==
    a0 :: get_sign_spec a0 :: 0)
     (l * a0 :: get_sign_spec a0 :: nil)


Debug:
Going to execute:
<Coq.Init.Tauto.with_uniform_flags>
 ltac:(fun flags => <Coq.Init.Tauto.tauto_gen> flags)


TcDebug (3) > 
Goal:
  
  ============================
   (NoDupA (nth 0 a0 : A) :: nth 0 a0 l ==
    a0 :: get_sign_spec a0 :: 0)


Goal:
  
  ============================
   (NoDupA (nth 0 a0 : A) :: nth 0 a0 l ==
    a0 :: get_sign_spec a0 :: 0)


Debug:
Going to execute:
fun flags solver =>
  <Coq.Init.Tauto.tauto_intuit> flags
   ltac:(<Coq.Init.Tauto.reduction_not_iff>) solver


TcDebug (4) > 
Goal:
  
  ============================
   (NoDupA (nth 0 a0 : A) :: nth 0 a0 l ==
    a0 :: get_sign_spec a0 :: 0)


Goal:
  
  ============================
   (NoDupA (nth 0 a0 : A) :: nth 0 a0 l ==
    a0 :: get_sign_spec a0 :: 0)


Debug:
Going to execute:
<Coq.Init.Tauto.tauto_intuit> flags ltac:(<Coq.Init.Tauto.reduction_not_iff>)
 solver


TcDebug (4) > 
Goal:
  
  ============================
   (NoDupA (nth 0 a0 : A) :: nth 0 a0 l ==
    a0 :: get_sign_spec a0 :: 0)


Goal:
  
  ============================
   (NoDupA (nth 0 a0 : A) :: nth 0 a0 l ==
    a0 :: get_sign_spec a0 :: 0)


Debug:
Going to execute:
fun flags t_reduce t_solver =>
  let rec t_tauto_intuit :=
   <Coq.Init.Tauto.simplif> flags;
    <Coq.Init.Tauto.axioms> flags ||
      match reverse goal with
      | id:(?X1 -> ?X2) -> ?X3
        |- _ =>
            cut X3;
             [ intro; clear id; t_tauto_intuit
             | cut (X1 -> X2);
                [ exact
                id
                | generalize (fun y : X2 => id (fun x : X2 => y)); intro;
                   clear id; (solve [ t_tauto_intuit ]) ] ]
      | id:~ ?X1 -> ?X3
        |- _ =>
            cut X3;
             [ intro; clear id; t_tauto_intuit
             | cut (~ X1);
                [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
      | |- ?X1 =>

