======== SAMPLE 1 ========
' /\ InT y r
  ============================
   (InT y (Node i l x r) /\ ~ X.eq y x)%type)


Debug:
Going to execute:
<Coq.Init.Tauto.is_unit_or_eq> flags X1; cut X2;
 [ intro; clear id | cut X1; [ exact id | constructor 1; fail ] ]


TcDebug (1) > 
Goal:
  
  i : Info.t
  l : tree
  x' : X.t
  r : tree
  x : X.t
  IHl : Ok l -> InT y (del x l) <-> InT y l /\ ~ X.eq y x
  IHr : Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  H0 : X.lt x x'
  H5 : Ok l
  H6 : Ok r
  H7 : lt_tree x' l
  H8 : gt_tree x' r
  ============================
   (InT y (Node i l x r) /\ ~ X.eq y x)%type)


Debug: Going to execute:
<Coq.Init.Tauto.is_unit_or_eq> flags X1; cut X2


TcDebug (1) > 
Goal:
  
  i : Info.t
  l : tree
  x' : X.t
  r : tree
  x : X.t
  IHl : Ok l -> InT y (del x l) <-> InT y l /\ ~ X.eq y x
  IHr : Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  H0 : X.lt x x'
  H5 : Ok l
  H6 : Ok r
  H7 : lt_tree x' l
  H8 : gt_tree x' r
  ============================
   (InT y (Node i l x r) /\ ~ X.eq y x)%type)


Debug: Going to execute:
<Coq.Init.Tauto.is_unit_or_eq> flags X1


TcDebug (1) > 
Goal:
  
  i : Info.t
  l : tree
  x' : X.t
  r : tree
  x : X.t
  IHl : Ok l -> InT y (del x l) <-> InT y l /\ ~ X.eq y x
  IHr : Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  H0 : X.lt x x'
  H5 : Ok l
  H6 : Ok r
  H7 : lt_tree x' l
  H8 : gt_tree x' r
  ============================
   (InT y (Node i l x r) /\ ~ X.eq y x)%type)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_unit_or_eq@0>


TcDebug (2) > 
Goal:
  
  i : Info.t
  l : tree
  x' : X.t
  r : tree
  x : X.t
  IHl : Ok l -> InT y (del x l) <-> InT y l /\ ~ X.eq y x
  IHr : Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  H0 : X.lt x x'
  H5 : Ok l
  H6 : Ok r
  H7 : lt_tree x' l
  H8 : gt_tree x' r
  ============================
   (InT y (Node i l x r) /\ ~ X.eq y x)%type)


Debug: Going to execute:
<tauto_plugin::is_unit_or_eq@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  i : Info.t

