======== SAMPLE 1 ========
 l
  H2 : In y r2
  H3 : In y (remove x r) -> False
  H1 : In y (remove x r) -> False
  H : In y l
  H4 : In y (remove x r)
  ============================
   False


Debug: Going to execute:
intros


TcDebug (0) > 
Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  cmp : elt -> elt -> bool
  m : t elt
  x : X.t
  y : elt
  H0 : X.eq x y
  H1 : X.eq y x
  H2 : In y (remove x r)
  H3 : In y (remove x r) -> False
  H1 : In y (remove x r) -> False
  H : In y l
  H4 : In y (remove x r)
  ============================
   False


Debug: Going to execute:
Private_OrderTac.Tac.order_loop


TcDebug (0) > 
Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  cmp : elt -> elt -> bool
  m : t elt
  x : X.t
  y : elt
  H0 : X.eq x y
  H1 : X.eq y x
  H2 : In y (remove x r)
  H3 : In y (remove x r) -> False
  H1 : In y (remove x r) -> False
  H : In y l
  H4 : In y (remove x r)
  ============================
   False


Debug:
Going to execute:
match goal with
| H:?x < ?x |- _ => exact (Private_OrderTac.Tac.lt_irrefl H)
| H:?x ~= ?x |- _ => exact (H (Private_OrderTac.Tac.eq_refl x))
| H:?x <= ?x |- _ => clear H; Private_OrderTac.Tac.order_loop
| H:?x == ?y
  |- _ =>
      Private_OrderTac.Tac.order_eq x y H; Private_OrderTac.Tac.order_loop
| H1:?x <= ?y, H2:?y <= ?x
  |- _ =>
      generalize (Private_OrderTac.Tac.le_antisym H1 H2); clear H1 H2; intro;
       Private_OrderTac.Tac.order_loop
| H1:?x <= ?y, H2:?x ~= ?y
  |- _ =>
      generalize (Private_OrderTac.Tac.le_neq_lt H1 H2); clear H1 H2; intro;
       Private_OrderTac.Tac.order_loop
| H1:?x <= ?y, H2:?y ~= ?x
  |- _ =>
      generalize
       (Private_OrderTac.Tac.le_neq_lt H1 (Private_OrderTac.Tac.neq_sym H2));
       clear H1 H2; intro; Private_OrderTac.Tac.order_loop
| H1:?x < ?y, H2:?y < ?z
  |- _ =>
      match goal with
      | H:x < z |- _ => fail 1
      | _ =>
          generalize (Private_OrderTac.Tac.lt_trans H1 H2); intro;
           Private_OrderTac.Tac.order_loop
      end
| H1:?x <= ?y, H2:?y < ?z
  |- _ =>
      match goal with
      | H:x < z |- _ => fail 1
      | _ =>
      
