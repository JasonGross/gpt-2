======== SAMPLE 1 ========
) (y : elt), InT y (add x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H : X.lt x x'
  H2 : InT y r
  ============================
   ((X.eq y x \/ InT y l \/ InT y r) \/ X.eq y x' \/ InT y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (add x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (add x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H : X.lt x x'
  H2 : InT y r
  ============================
   ((X.eq y x \/ InT y l \/ InT y r) \/ X.eq y x' \/ InT y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (1) > 
Goal:
  
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (add x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (add x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H : X.lt x x'
  H2 : InT y r
  ============================
   ((X.eq y x \/ InT y l \/ InT y r) \/ X.eq y x' \/ InT y r)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (add x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (add x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H : X.lt x x'
  H2 : InT y r
  ============================
   ((X.eq y x \/ InT y l \/ InT y r) \/ X.eq y x' \/ InT y r)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (add x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (add x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H : X.lt x x'
  H2 : InT y r
  ============================
   ((X.eq y x \/ InT y l \/ InT y r) \/ X.eq y x' \/ InT y r)


Debug:
Going to execute:
<Coq.Init.Tauto.is_con
