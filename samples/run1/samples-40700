======== SAMPLE 1 ========
 rl
  H2 : X.eq y rx
  ============================
   (X.eq y rx)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (4) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H0 : X.eq y rx
  ============================
   (X.eq y rx)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H0 : X.eq y rx
  ============================
   (X.eq y rx)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (3) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H0 : X.eq y rx
  ============================
   (X.eq y rx)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (3) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H0 : X.eq y rx
  ============================
   (X.eq y rx)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (3) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H0 : X.eq y rx
  ============================
   (X.eq y rx)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (3) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh)
