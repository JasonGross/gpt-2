======== SAMPLE 1 ========
 x rl \/ X.eq y rx \/ InT y rr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_unit_or_eq@0>


TcDebug (4) > 
Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  rl : tree
  rx : X.t
  rr : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (del x l) <-> InT y l /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok (Bk rl rx rr) ->
        InT y (del x (Bk rl rx rr)) <-> InT y (Bk rl rx rr) /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x' x
  H5 : Ok l
  H6 : Ok (Bk rl rx rr)
  H7 : lt_tree x' l
  H8 : gt_tree x' (Bk rl rx rr)
  H2 : X.eq y x -> False
  H : InT y rl
  ============================
   (InT y rl \/ X.eq y rx \/ InT y rr)


Debug: Going to execute:
<tauto_plugin::is_unit_or_eq@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  rl : tree
  rx : X.t
  rr : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (del x l) <-> InT y l /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok (Bk rl rx rr) ->
        InT y (del x (Bk rl rx rr)) <-> InT y (Bk rl rx rr) /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x' x
  H5 : Ok l
  H6 : Ok (Bk rl rx rr)
  H7 : lt_tree x' l
  H8 : gt_tree x' (Bk rl rx rr)
  H2 : X.eq y x -> False
  H : InT y rl
  ============================
   (InT y rl \/ X.eq y rx \/ InT y rr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (3) > 
Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  rl : tree
  rx : X.t
  rr : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (del x l) <-> InT y l /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok (Bk rl rx rr) ->
        InT y (del x (Bk rl rx rr)) <-> InT y (Bk rl rx rr) /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x' x
  H5 : Ok l
  H6 :
