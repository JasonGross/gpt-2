======== SAMPLE 1 ========
  H3 : lt_tree y l
  H4 : gt_tree y l
  H2 : In y r1
  H6 : MapsTo y r2
  H12 : MapsTo y l1
  ============================
   (X.lt y x1)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (3) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  _x0 : int
  lrl : t elt
  lrx : key
  lrd : elt
  lrr : t elt
  _x2 : int
  _x : height (Node ll lx ld (Node lrl lrx lrd lrr _x2) _x0) > height r + 2
  _x2 : height ll < height (Node lrl lrx lrd lrr _x2)
  y : key
  ============================
   (X.lt y x1)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (3) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  _x0 : int
  lrl : t elt
  lrx : key
  lrd : elt
  lrr : t elt
  _x2 : int
  _x : height (Node ll lx ld (Node lrl lrx lrd lrr _x2) _x0) > height r + 2
  _x2 : height ll < height (Node lrl lrx lrd lrr _x2)
  y : key
  ============================
   (X.lt y x1)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (3) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  _x0 : int
  lrl : t elt
  lrx : key
  lrd : elt
  lrr : t elt
  _x2 : int
  _x : height (Node ll lx ld (Node lrl lrx lrd lrr _x2) _x0) > height r + 2
  _x2 : height ll < height (Node lrl lrx lrd lrr _x2)
  y : key
  ============================
   (X.lt y x1)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (4) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  _x0 : int
  lrl : t elt
  lrx : key
  lrd : elt
  lrr : t elt
  _x2 : int
  _x : height (Node ll lx ld (Node lrl lrx lrd lrr _x2) _x0) > height r + 2
  _x2 : height ll < height (Node lrl lrx lrd lrr _x2)
  y : key
  ============================
   (X.lt y x1)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
 
