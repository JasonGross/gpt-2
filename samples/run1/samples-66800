======== SAMPLE 1 ========
 l')
  H0 : X.eq x x'
  H6 : Ok l
  H7 : lt_tree x' l'
  H8 : gt_tree x' (Bk rl rx rr)
  H2 : X.eq y x -> False
  H10 : Ok rl
  H11 : Ok rr
  H12 : lt_tree rx rl
  H13 : gt_tree rx rr
  H3 : InT y rr
  ============================
   ((InT y l \/ X.eq y x' \/ InT y rl \/ X.eq y rx \/ InT y rr) \/ X.eq y x' \/ InT y rr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  rl : tree
  rx : X.t
  rr : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (del x l) <-> InT y l /\ (X.eq y x -> False)
  IHr : forall (x : X.t) (y : elt),
        Ok (Bk rl rx rr) ->
        InT y (del x (Bk rl rx rr)) <->
        InT y (Bk rl rx rr) /\ (X.eq y x -> False)
  x : X.t
  y : elt
  H0 : X.eq x x'
  H6 : Ok l
  H7 : lt_tree x' l'
  H8 : gt_tree x' (Bk rl rx rr)
  H2 : X.eq y x -> False
  H10 : Ok rl
  H11 : Ok rr
  H12 : lt_tree rx rl
  H13 : gt_tree rx rr
  H3 : InT y rr
  ============================
   ((InT y l \/ X.eq y x' \/ InT y rl \/ X.eq y rx \/ InT y rr) \/ X.eq y x' \/ InT y rr)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  rl : tree
  rx : X.t
  rr : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (del x l) <-> InT y l /\ (X.eq y x -> False)
  IHr : forall (x : X.t) (y : elt),
        Ok (Bk rl rx rr) ->
        InT y (del x (Bk rl rx rr)) <->
        InT y (Bk rl rx rr) /\ (X.eq y x -> False)
  x : X.t
  y : elt
  H0 : X.eq x x'
  H6 : Ok l
  H7 : lt_tree x' l'
  H8 : gt_tree x' (Bk rl rx rr)
  H2 : X.eq y x -> False
  H10 : Ok rl
  H11 : Ok rr
  H12 : lt_tree rx rl
  H13 : gt_tree rx rr
  H3 : InT y rr
  ============================
   ((InT y l \/ X.eq y x' \/ InT y rl \/ X.
