======== SAMPLE 1 ========
 (2 * a + j + b)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  a : Q
  b : Q
  j : Q
  H : QSeqEquivExpr a = true
  H0 : (QSeqEquivExpr a -> False) -> False
  H1 : (QSeqEquivExpr a -> False) -> False
  ============================
   (a = -1 \/ -1 < a < -1 \/ a = -1 \/ a = 1 \/ a = p \/ a = -1 \/ H0)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  a : Q
  b : Q
  j : Q
  H : QSeqEquivExpr a = true
  H0 : (QSeqEquivExpr a -> False) -> False
  H1 : (QSeqEquivExpr a -> False) -> False
  ============================
   (a = -1 \/ -1 < a < -1 \/ a = -1 \/ a = 1 \/ H0)


Debug: Going to execute:
elim id


TcDebug (1) > 
Debug: Evaluated term: a

Goal:
  
  a : Q
  b : Q
  j : Q
  H : QSeqEquivExpr a = true
  H0 : (QSeqEquivExpr a -> False) -> False
  H1 : (QSeqEquivExpr a -> False) -> False
  ============================
   (a = -1 \/ -1 < a < -1 \/ a = -1 \/ a = 1 \/ H0)


Debug: Going to execute:
do 2 intro


TcDebug (1) > 
Goal:
  
  a : Q
  b : Q
  j : Q
  H : QSeqEquivExpr a = true
  H0 : (QSeqEquivExpr a -> False) -> False
  H1 : (QSeqEquivExpr a -> False) -> False
  ============================
   (a = -1 \/ -1 < a < -1 \/ a = -1 \/ a = 1 \/ H0)


Debug: Going to execute:
intro


TcDebug (1) > 
Goal:
  
  a : Q
  b : Q
  j : Q
  H : QSeqEquivExpr a = true
  H0 : (QSeqEquivExpr a -> False) -> False
  H1 : (QSeqEquivExpr a -> False) -> False
  ============================
   (a = -1 \/ -1 < a < -1 \/ a = -1 \/ a = 1 \/ H0)


Debug: Going to execute:
<ltac_plugin::intro@0>


TcDebug (1) > 
Goal:
  
  a : Q
  b : Q
  j : Q
  H : QSeqEquivExpr a = true
  H0 : (QSeqEquivExpr a -> False) -> False
  H1 : (QSeqEquivExpr a -> False) -> False
  H2 : (a = -1 \/ -1 < a < -1 \/ a = -1 \/ a = 1) \/
       (a = 0 \/ 1 < a < -1 \/ a = 1 \/ H2))


Goal:
  
  a : Q
  b : Q
  j : Q
  H : QSeqEquivExpr a = true
  H0 : (QSeqEquivExpr a -> False) -> False
  H1 : (QSeqEquivExpr a -> False) -> False
  H2 : (a = -1 \/ -1 < a < -1 \/ a = -1 \/ a = 1) \/
 
