======== SAMPLE 1 ========
     | 0 => true
      end <> None
  H2 : In x s
  H7 : false = true
  ============================
   (false = true)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : In x s
  H7 : false = true
  ============================
   (false = true)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (1) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : In x s
  H7 : false = true
  ============================
   (false = true)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : In x s
  H7 : false = true
  ============================
   (false = true)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : In x s
  H7 : false = true
  ============================
   (false = true)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : In x s
  H7 : false = true
  ============================
   (false = true)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 :
