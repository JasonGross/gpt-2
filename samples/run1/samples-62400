======== SAMPLE 1 ========
#


Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  a : elt
  s : list elt
  IHs : forall (x : elt) (f : elt -> bool),
        Proper (X.eq ==> eq) f -> In x (filter f s) <-> In x s /\ f x = true
  x : elt
  f : elt -> bool
  H : Proper (X.eq ==> eq) f
  E : f a = true
  H1 : X.eq x a \/ In x s
  H2 : f x = true
  H0 : In x s
  ============================
   (In x s)


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  a : elt
  s : list elt
  IHs : forall (x : elt) (f : elt -> bool),
        Proper (X.eq ==> eq) f -> In x (filter f s) <-> In x s /\ f x = true
  x : elt
  f : elt -> bool
  H : Proper (X.eq ==> eq) f
  E : f a = true
  H1 : X.eq x a \/ In x s
  H2 : f x = true
  H0 : In x s
  ============================
   (In x s)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (3) > 
Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  a : elt
  s : list elt
  IHs : forall (x : elt) (f : elt -> bool),
        Proper (X.eq ==> eq) f -> In x (filter f s) <-> In x s /\ f x = true
  x : elt
  f : elt -> bool
  H : Proper (X.eq ==> eq) f
  E : f a = true
  H1 : X.eq x a \/ In x s
  H2 : f x = true
  H0 : In x s
  ============================
   (In x s)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (3) > 
Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  a : elt
  s : list elt
  IHs : forall (x : elt) (f : elt -> bool),
        Proper (X.eq ==> eq) f -> In x (filter f s) <-> In x s /\ f x = true
  x : elt
  f : elt -> bool
  H : Proper (X.eq ==> eq) f
  E : f a = true
  H1 : X.eq x a \/ In x s
  H2 : f x = true
  H0 : In x s
  ============================
   (In x s)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (
