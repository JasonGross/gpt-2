======== SAMPLE 1 ========
 a l1 -> InA a l2
  H8 : InA a l1 -> eqA a x \/ InA a l1
  H9 : eqA a y -> eqA a x \/ InA a l
  H13 : InA a l
  ============================
   (InA a l1 \/ InA a l2)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  A : Type
  eqA : A -> A -> Prop
  eqA_equiv : Equivalence eqA
  l : list A
  l1 : list A
  l2 : list A
  x : A
  y : A
  H : eqA x y
  H1 : NoDupA (l1 ++ y :: l2)
  H2 : equivlistA (x :: l) (l1 ++ y :: l2)
  a : A
  H3 : InA x l -> False
  H4 : NoDupA l
  H0 : InA y l1 \/ InA y l2 -> False
  H5 : NoDupA (l1 ++ l2)
  H7 : InA a l1 \/ InA a l2
  H8 : InA a l1 -> eqA a x \/ InA a l1
  H9 : eqA a y -> eqA a x \/ InA a l
  H13 : InA a l
  ============================
   (InA a l1 \/ InA a l2)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  A : Type
  eqA : A -> A -> Prop
  eqA_equiv : Equivalence eqA
  l : list A
  l1 : list A
  l2 : list A
  x : A
  y : A
  H : eqA x y
  H1 : NoDupA (l1 ++ y :: l2)
  H2 : equivlistA (x :: l) (l1 ++ y :: l2)
  a : A
  H3 : InA x l -> False
  H4 : NoDupA l
  H0 : InA y l1 \/ InA y l2 -> False
  H5 : NoDupA (l1 ++ l2)
  H7 : InA a l1 \/ InA a l2
  H8 : InA a l1 -> eqA a x \/ InA a l1
  H9 : eqA a y -> eqA a x \/ InA a l
  H13 : InA a l
  ============================
   (InA a l1 \/ InA a l2)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  A : Type
  eqA : A -> A -> Prop
  eqA_equiv : Equivalence eqA
  l : list A
  l1 : list A
  l2 : list A
  x : A
  y : A
  H : eqA x y
  H1 : NoDupA (l1 ++ y :: l2)
  H2 : equivlistA (x :: l) (l1 ++ y :: l2)
  a : A
  H3 : InA x l -> False
  H4 : NoDupA l
  H0 : InA y l1 \/ InA y l2 -> False
  H5 : NoDupA (l1 ++ l2)
  H7 : InA a l1 \/ InA a l2
  H8 : InA a l1 -> eqA a x \/ InA a l1
  H9 : eqA a y -> eqA a x \/ InA a l
  H13 : InA a l
  ============================
   (InA a l1 \/ InA a l2)


Debug: Going to execute:
<Coq.
