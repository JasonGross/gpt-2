======== SAMPLE 1 ========
 rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  _x : int
  rlt : t elt
  rrx : int
  rsr : t elt
  _x1 : int
  rlt_e : height (Node rl rx rd rr _x1) > height rl?.le x : key
  e : elt
  H : InT elt
  H2 : InT elt
  H3 : InT elt
  ============================
   (InT elt)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  _x : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  _x1 : int
  rlt : t elt
  rrx : int
  rsr : t elt
  _x1 : int
  rlt_e : height (Node rl rx rd rr _x1) > height rl?.le x : key
  e : elt
  H : InT elt
  H2 : InT elt
  H3 : InT elt
  ============================
   (InT elt)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (1) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  _x : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  _x1 : int
  rlt : t elt
  rrx : int
  rsr : t elt
  _x1 : int
  rlt_e : height (Node rl rx rd rr _x1) > height rl?.le x : key
  e : elt
  H : InT elt
  H2 : InT elt
  H3 : InT elt
  ============================
   (InT elt)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  _x : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  _x1 : int
  rlt : t elt
  rrx : int
  rsr : t elt
  _x1 : int
  rlt_e : height (Node rl rx rd rr _x1) > height rl?.le x : key
  e : elt
  H : InT elt
  H2 : InT elt
  H3 : InT elt
  ============================
   (InT elt)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  _x : int
  rll : t elt
  rlx : key
  rld : elt
  rlr : t elt
  _x1 : int
  rlt : t elt
  rrx : int
  rsr : t elt
  _x1 : int
  rlt_e : height (Node rl rx rd rr _x1) > height rl?.le x : key
  e : elt
  H : InT elt
  H2 : InT elt
  H3 : InT elt

