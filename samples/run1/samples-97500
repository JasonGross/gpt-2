======== SAMPLE 1 ========
_disj@0>


TcDebug (1) > 
Goal:
  
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (ins x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (ins x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H : X.lt x' x
  H1 : X.eq y x'
  ============================
   (X.eq y x \/ InT y l \/ X.eq y x' \/ InT y r <->
    X.eq y x \/ InT y l \/ X.eq y x \/ InT y (Node _x (Node _x ll lx lr)) \/ InT y r)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (1) > 
Debug: Level 1: evaluation returns
<tactic closure>


Goal:
  
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (ins x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (ins x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H : X.lt x' x
  H1 : X.eq y x'
  ============================
   (X.eq y x \/ InT y l \/ X.eq y x' \/ InT y r <->
    X.eq y x \/ InT y l \/ X.eq y x \/ InT y (Node _x (Node _x ll lx lr)) \/ InT y r)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (0) > 
Goal:
  
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (ins x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (ins x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H : X.lt x' x
  H1 : X.eq y x'
  ============================
   (X.eq y x \/ InT y l \/ X.eq y x' \/ InT y r <->
    X.eq y x \/ InT y l \/ X.eq y x \/ InT y (Node _x (Node _x ll lx lr)) \/ InT y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (0) > 
Goal:
  
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt), InT y (ins x l) <-> X.eq y x \/ InT y l
  IHr : forall (x : X.t) (y : elt), InT y (ins x r) <-> X.eq y x \/ InT y r
  x : X.t
  y : elt
  H : X.lt x' x
  H1 : X.eq y x'
  ============================
   (X.eq y x \/ InT y l \/ X.eq y x' \/ InT y r <->
    X.eq y x \/
