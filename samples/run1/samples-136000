======== SAMPLE 1 ========
 IHt0 : Sorted X.lt0 (rev l1)
  H1 : forall x : X.t,
       (if_lu_ok := [a]%positive then x0, x1, x2, x3, x4, x5, x6, x7, x8) else x0, x1, x2, x3, x4) = res
  x3 : X.t
  x5 : list X.t
  ============================
   (forall l2 : list X.t,
    ([a] * (x1 * l2) + x3 @ l == [a] * x5 @ l) ->
    ([a] * x3 @ l + [a] * x4 @ l == [a] * x5 @ l)
    - (x2 @ l) == - x1 @ l + - x1 @ l)


Debug:
Going to execute:
match goal with
| |- _ -> _ => intro; t_tauto_intuit
| |- _ => t_reduce; t_solver
end


TcDebug (1) > 
Goal:
  
  U : Type
  P : t -> U
  x : X.t
  l : list U
  H : Sorted X.lt nil
  H0 : Sorted X.lt (rev l1)
  H1 : forall x : X.t,
       (if_lu_ok := [a]%positive then x0, x1, x2, x3, x4, x5, x6, x7, x8) else x0, x1, x2, x3, x4) = res
  x3 : X.t
  x5 : list X.t
  ============================
   (forall l2 : list X.t,
    ([a] * (x1 * l2) + x3 @ l == [a] * x5 @ l) ->
    ([a] * x3 @ l + [a] * x4 @ l == [a] * x5 @ l)
    - (x2 @ l) == - x1 @ l + - x1 @ l)


Debug: Going to execute:
t_reduce; t_solver


TcDebug (2) > 
Goal:
  
  U : Type
  P : t -> U
  x : X.t
  l : list U
  H : Sorted X.lt nil
  H0 : Sorted X.lt (rev l1)
  H1 : forall x : X.t,
       (if_lu_ok := [a]%positive then x0, x1, x2, x3, x4, x5, x6, x7, x8) else x0, x1, x2, x3, x4) = res
  x3 : X.t
  x5 : list X.t
  ============================
   (forall l2 : list X.t,
    ([a] * (x1 * l2) + x3 @ l == [a] * x5 @ l) ->
    ([a] * x3 @ l + [a] * x4 @ l == [a] * x5 @ l)
    - (x2 @ l) == - x1 @ l + - x1 @ l)


Debug: Going to execute:
t_reduce


TcDebug (2) > 
Goal:
  
  U : Type
  P : t -> U
  x : X.t
  l : list U
  H : Sorted X.lt nil
  H0 : Sorted X.lt (rev l1)
  H1 : forall x : X.t,
       (if_lu_ok := [a]%positive then x0, x1, x2, x3, x4, x5, x6, x7, x8) else x0, x1, x2, x3, x4) = res
  x3 : X.t
  x5 : list X.t
  ============================
   (forall l2 : list X.t,
    ([a] * (x1 *
