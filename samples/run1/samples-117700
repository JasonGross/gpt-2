======== SAMPLE 1 ========
     (solve [ t_tauto_intuit ]) ] ]
| id:~ ?X1 -> ?X3
  |- _ =>
      cut X3;
       [ intro; clear id; t_tauto_intuit
       | cut X1;
          [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
| |- ?X1 =>
      <Coq.Init.Tauto.is_disj> flags X1; (solve
       [ left; t_tauto_intuit | right; t_tauto_intuit ])
end


TcDebug (1) > 
Goal:
  
  s2 : tree
  s1 : tree
  s2' : tree
  a : elt
  H : InT a (Node _ (Leaf elt) _) /\ InT a s2 <->
      (InT a s2 /\ ~ InT a s1) /\ ~ (InT a s2 /\ ~ InT a s1))
  ============================
   ((InT a s2 \/ InT a s1) /\ ~ InT a s2)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; (solve
 [ left; t_tauto_intuit | right; t_tauto_intuit ])


TcDebug (2) > 
Goal:
  
  s2 : tree
  s1 : tree
  s2' : tree
  a : elt
  H : InT a (Node _ (Leaf elt) _) /\ InT a s2 <->
      (InT a s2 /\ ~ InT a s1) /\ ~ (InT a s2 /\ ~ InT a s1))
  ============================
   ((InT a s2 \/ InT a s1) /\ ~ InT a s2)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (2) > 
Goal:
  
  s2 : tree
  s1 : tree
  s2' : tree
  a : elt
  H : InT a (Node _ (Leaf elt) _) /\ InT a s2 <->
      (InT a s2 /\ ~ InT a s1) /\ ~ (InT a s2 /\ ~ InT a s1))
  ============================
   ((InT a s2 \/ InT a s1) /\ ~ InT a s2)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (3) > 
Goal:
  
  s2 : tree
  s1 : tree
  s2' : tree
  a : elt
  H : InT a (Node _ (Leaf elt) _) /\ InT a s2 <->
      (InT a s2 /\ ~ InT a s1) /\ ~ (InT a s2 /\ ~ InT a s1))
  ============================
   ((InT a s2 \/ InT a s1) /\ ~ InT a s2)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  s2 : tree
  s1 : tree
  s2' : tree
  a : elt
  H : InT a (Node _ (Leaf elt) _) /\ InT a s2 <->
      (InT a s2 /\ ~ InT a s1) /\ ~ (InT a s2 /\ ~ InT a s1))
  ============================
   ((InT a s2 \/ InT a s1) /\ ~ InT a s2)


