======== SAMPLE 1 ========
 x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  _x0 : int
  _x : height (Node ll lx ld (Leaf elt) _x0) > height r + 2
  e1 : split x d r = << ll, lx, ld >>
  y : key
  e : elt
  e' : elt
  H0 : X.eq y x
  ============================
   (X.eq y x')


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (3) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  _x0 : int
  _x : height (Node ll lx ld (Leaf elt) _x0) > height r + 2
  e1 : split x d r = << ll, lx, ld >>
  y : key
  e : elt
  e' : elt
  H0 : X.eq y x
  ============================
   (X.eq y x')


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  _x0 : int
  _x : height (Node ll lx ld (Leaf elt) _x0) > height r + 2
  e1 : split x d r = << ll, lx, ld >>
  y : key
  e : elt
  e' : elt
  H0 : X.eq y x
  ============================
   (X.eq y x')


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  _x0 : int
  _x : height (Node ll lx ld (Leaf elt) _x0) > height r + 2
  e1 : split x d r = << ll, lx, ld >>
  y : key
  e : elt
  e' : elt
  H0 : X.eq y x
  ============================
   (X.eq y x')


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  _x0 : int
  _x : height (Node ll lx ld (Leaf elt) _x0) > height r + 2
  e1 : split x d r = << ll, lx, ld >>
  y : key
  e : elt
  e' : elt
  H0 : X.eq y x
  ============================
   (X.eq y x')


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  d : elt
  r : t elt
  ll : t elt
  lx : key
  ld : elt
  _x0 : int
  _x : height (Node ll lx ld (Leaf elt) _x0)
