======== SAMPLE 1 ========
 H : mem y r = true
  H2 : y~1~1 = 1
  ============================
   (mem y r = true)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (1) > 
Goal:
  
  x : positive
  IHx : forall (y : positive) (s : t),
        mem y (add x s) = true <-> y = x \/ mem y s = true
  y : positive
  l : tree
  o : bool
  r : tree
  H : mem y r = true
  H2 : y~1~1 = 1
  ============================
   (mem y r = true)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (1) > 
Goal:
  
  x : positive
  IHx : forall (y : positive) (s : t),
        mem y (add x s) = true <-> y = x \/ mem y s = true
  y : positive
  l : tree
  o : bool
  r : tree
  H : mem y r = true
  H2 : y~1~1 = 1
  ============================
   (mem y r = true)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  x : positive
  IHx : forall (y : positive) (s : t),
        mem y (add x s) = true <-> y = x \/ mem y s = true
  y : positive
  l : tree
  o : bool
  r : tree
  H : mem y r = true
  H2 : y~1~1 = 1
  ============================
   (mem y r = true)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (1) > 
Goal:
  
  x : positive
  IHx : forall (y : positive) (s : t),
        mem y (add x s) = true <-> y = x \/ mem y s = true
  y : positive
  l : tree
  o : bool
  r : tree
  H : mem y r = true
  H2 : y~1~1 = 1
  ============================
   (mem y r = true)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (2) > 
Goal:
  
  x : positive
  IHx : forall (y : positive) (s : t),
        mem y (add x s) = true <-> y = x \/ mem y s = true
  y : positive
  l : tree
  o : bool
  r : tree
  H : mem y r = true
  H2 : y~1~1 = 1
  ============================
   (mem y r = true)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  x : positive
  IHx : forall (y : positive) (s : t),
        mem y (add x s) = true <-> y = x \/ mem y s = true
  y : positive
  l : tree
  o : bool
  r : tree
  H : mem y r = true
  H2 : y~1~1 = 1
  ============================
   (mem y r = true)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (1)
