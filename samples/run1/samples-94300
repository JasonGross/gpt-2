======== SAMPLE 1 ========
) > 
Debug: Evaluated term: (X.eq y x)

Debug: Evaluated term: (Some d = Some d -> find y (remove x r))

Goal:
  
  elt : Type
  x : X.t
  l : t elt
  y : key
  d : elt
  r : t elt
  _x : int
  _x0 : X.lt x y
  y0 : key
  H0 : bst l
  H1 : bst r
  H2 : lt_tree y l
  H3 : gt_tree y r
  ============================
   (find y r = find y0 (remove x l) /\ bst r)


Debug: Going to execute:
match goal with
| |- ?X1 -> ?X2 => intro
| |- ~ _ => unfold not at 1; intro
end


TcDebug (0) > 
Debug: Level 0: No matching clauses for match.

Goal:
  
  elt : Type
  x : X.t
  l : t elt
  y : key
  d : elt
  r : t elt
  _x : int
  _x0 : X.lt x y
  y0 : X.t
  H : bst (Node l y d r _x)
  Hm : Sort l
  Hm' : Sort l'
  Hm'' : Sort l'
  H1 : bst l
  H1' : bst r
  H2 : lt_tree y l
  H3 : gt_tree y r
  ============================
   (find y0 l = find y0 (remove x l) /\ bst r)


Debug:
Going to execute:
match reverse goal with
| id:?X1
  |- _ => <Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id
| id:_ <-> _ |- _ => elim id; do 2 intro; clear id
| id:~ _ |- _ => red in id
| id:?X1 |- _ => <Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id
| id0:?X1 -> ?X2, id1:?X1 |- _ => assert X2; [ exact (id0 id1) | clear id0 ]
| id:?X1 -> ?X2
  |- _ =>
      <Coq.Init.Tauto.is_unit_or_eq> flags X1; cut X2;
       [ intro; clear id | cut X1; [ exact id | constructor 1; fail ] ]
| id:?X1 -> ?X2
  |- _ => <Coq.Init.Tauto.flatten_contravariant_conj> flags X1 X2 id
| id:?X1 <-> ?X2 -> ?X3
  |- _ =>
      assert ((X1 -> X2) -> (X2 -> X1) -> X3) by
       (do 2 intro; apply id; split; assumption); clear id
| id:?X1 -> ?X2
  |- _ => <Coq.Init.Tauto.flatten_contravariant_disj> flags X1 X2 id
| |- ?X1 => <Coq.Init.Tauto.is_conj> flags X1; split
| |- _ <-> _ => split
| |- ~ _ => red
end; <Coq.Init.Tauto.not_dep_intros>


TcDebug (0) > 
Goal:
  
  elt : Type
  x : X.t
  l : t elt
  y : key
  d : elt
  r : t elt
  _x : int
  _x0 : X.lt x y
  y0 : X.t
  H : bst (Node l y d r _x)
  Hm : Sort l
  Hm' : Sort l'
  Hm'' : Sort l'
  H1 : bst l
  H1' : bst r
  H2 : lt_tree y l

