======== SAMPLE 1 ========
 r : tree  lr : tree  y : elt  t : tree  H0 : InT y r
  ============================
   ((InT y ll \/ X.eq y lx \/ InT y lr) \/ InT y t0 \/ X.eq y x \/ InT y t0 \/ InT y r) /\
    (InT y r \/ X.eq y t0 \/ InT y r) \/ InT y t0 \/ InT y r)


Debug: Going to execute:
<cfl_plugin::is_empty@0>


TcDebug (4) > 
Goal:
  
  i : U
  ll : tree
  lx : X.t
  lr : tree
  x : X.t
  r : tree
  y : elt
  t : tree
  H0 : InT y r
  ============================
   ((InT y ll \/ X.eq y lx \/ InT y lr) \/ InT y t0 \/ X.eq y x \/ InT y t0 \/ InT y r) /\
    (InT y r \/ X.eq y t0 \/ InT y r) \/ InT y t0 \/ InT y r)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (5) > 
Goal:
  
  i : U
  ll : tree
  lx : X.t
  lr : tree
  x : X.t
  r : tree
  y : elt
  t : tree
  H0 : InT y r
  ============================
   ((InT y ll \/ X.eq y lx \/ InT y lr) \/ InT y t0 \/ X.eq y x \/ InT y t0 \/ InT y r) /\
    (InT y r \/ X.eq y t0 \/ InT y r) \/ InT y t0 \/ InT y r)


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (5) > 
Debug: Level 5: evaluation returns
<tactic closure>


Goal:
  
  i : U
  ll : tree
  lx : X.t
  lr : tree
  x : X.t
  r : tree
  y : elt
  t : tree
  H0 : InT y r
  ============================
   ((InT y ll \/ X.eq y lx \/ InT y lr) \/ InT y t0 \/ X.eq y x \/ InT y t0 \/ InT y r) /\
    (InT y r \/ X.eq y t0 \/ InT y r) \/ InT y t0 \/ InT y r)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (4) > 
Goal:
  
  i : U
  ll : tree
  lx : X.t
  lr : tree
  x : X.t
  r : tree
  y : elt
  t : tree
  H0 : InT y r
  ============================
   ((InT y ll \/ X.eq y lx \/ InT y lr) \/ InT y t0 \/ X.eq y x \/ InT y t0 \/ InT y r) /\
    (InT y r \/ X.eq y t0 \/ InT y r) \/ InT y t0 \/ InT y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (4) > 
Goal:
  
  i : U
  ll : tree
  lx : X.t
  lr : tree
  x : X.t
  r : tree
  y : elt
  t : tree
  H
