======== SAMPLE 1 ========
 a -> N
  res_eq : R -> R -> Prop
  H' : forall x : R, In x (Add x r) <-> P x \/ In x r
  x : R
  Hx : x == x
  H0 : In x r
  ============================
   (In x (add x r))


Debug: Going to execute:
<Coq.Init.Tauto.is_unit_or_eq> flags X1


TcDebug (2) > 
Goal:
  
  R : Type
  rO : R
  rI : R
  rplus : R -> R -> R
  rtimes : R -> R -> R
  rminus : R -> R -> R
  ropp : R -> R
  req : R -> R -> Prop
  rle : R -> R -> Prop
  rlt : R -> R -> Prop
  sor : SOR 0 1 rplus rtimes rminus ropp req rle rlt
  C : Type
  cO : C
  cI : C
  cplus : C -> C -> C
  ctimes : C -> C -> C
  cminus : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool
  cleb : C -> C -> bool
  phi : C -> R
  E : Type
  pow_phi : N -> E
  rpow : R -> E -> R
  addon : SORaddon
  T : Type
  env : PolEnv
  tg : T
  F := fun (x : NFormula) (acc : list (list (NFormula * T))) =>
       if check_inconsistent x then acc else ((x, tg) :: nil) :: acc
    : NFormula -> list (list (NFormula * T)) -> list (list (NFormula * T))
  G := fun x : NFormula => eval_nformula env x -> False : NFormula -> Prop
  EQ : check_inconsistent (lg env) = true
  H : eval_cnf eval_nformula env (fold_right F (cnf_tt NFormula T) l) ->
      make_conj G l
  H2 : eval_nformula env a -> False
  H1 : eval_cnf eval_nformula env l
  H4 : make_conj G l
  H0 : False
  ============================
   (make_conj (fun x : NFormula => eval_nformula env x -> False) lt
       (fold_right F (cnf_tt NFormula T) l) <->
    make_conj (fun x : NFormula => eval_nformula env x -> False) lt)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_unit_or_eq@0>


TcDebug (3) > 
Goal:
  
  R : Type
  rO : R
  rI : R
  rplus : R -> R -> R
  rtimes : R -> R -> R
  rminus : R -> R -> R
  ropp : R -> R
  req : R -> R -> Prop
  rle : R -> R -> Prop
  rlt : R -> R -> Prop
  sor : SOR 0 1 rplus rtimes rminus ropp req rle rlt
  C : Type
  cO : C
  cI : C
  cplus : C -> C -> C
  ctimes : C -> C -> C
  cminus : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool
  cleb : C -> C -> bool
  phi : C -> R
  E : Type
  pow_phi : N -> E
  rpow : R -> E -> R
  addon : SORaddon
  T : Type
  env : PolEnv
  tg : T
  F := fun (x : NFormula) (acc : list (list (NFormula * T))) =>
       if check_inconsistent x then acc else ((x, tg) :: nil) :: acc
    : NFormula -> list (
