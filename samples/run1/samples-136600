======== SAMPLE 1 ========
L1 l1 x1 r1) \/ InT y s2
  ============================
   (X.lt x1 y)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  _x : I.t
  l1 : tree
  x1 : X.t
  r1 : tree
  s2 : tree
  IHt0 : forall y : elt,
         Ok l1 ->
         Ok (split x1 s2)#l ->
         InT y (union l1 (split x1 s2)#l) <->
         InT y l1 \/ InT y (split x1 s2)#l
  IHt1 : forall y : elt,
         Ok r1 ->
         Ok (split x1 s2)#r ->
         InT y (union r1 (split x1 s2)#r) <->
         InT y r1 \/ InT y (split x1 s2)#r
  y : elt
  B2 : Ok s2
  H4 : Ok l1
  H5 : Ok r1
  H6 : lt_tree x1 l1
  H7 : gt_tree x1 r1
  H : X.eq y x1
  H1 : InT y r1 \/ InT y s2 /\ X.lt x1 y
  ============================
   (X.lt x1 y)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (1) > 
Goal:
  
  _x : I.t
  l1 : tree
  x1 : X.t
  r1 : tree
  s2 : tree
  IHt0 : forall y : elt,
         Ok l1 ->
         Ok (split x1 s2)#l ->
         InT y (union l1 (split x1 s2)#l) <->
         InT y l1 \/ InT y (split x1 s2)#l
  IHt1 : forall y : elt,
         Ok r1 ->
         Ok (split x1 s2)#r ->
         InT y (union r1 (split x1 s2)#r) <->
         InT y r1 \/ InT y (split x1 s2)#r
  y : elt
  B2 : Ok s2
  H4 : Ok l1
  H5 : Ok r1
  H6 : lt_tree x1 l1
  H7 : gt_tree x1 r1
  H : X.eq y x1
  H1 : InT y r1 \/ InT y s2 /\ X.lt x1 y
  ============================
   (X.lt x1 y)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  _x : I.t
  l1 : tree
  x1 : X.t
  r1 : tree
  s2 : tree
  IHt0 : forall y : elt,
         Ok l1 ->
         Ok (split x1 s2)#l ->
         InT y (union l1 (split x1 s2)#l) <->
         InT y l1 \/ InT y (split x1 s2)#l
  IHt1 : forall y : elt,
       
