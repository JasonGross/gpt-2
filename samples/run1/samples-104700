======== SAMPLE 1 ========

       InT y (union r1 (split x1 s2)#r) <->
        X.eq y x1 \/ InT y r1 \/ InT y s2
  x2 : X.t
  y2 : X.t
  H0 : InT y s2
  H2 : X.eq y x2
  ============================
   (InT y (Node _x l1 x1 r1))


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  _x : I.t
  l1 : tree
  x1 : X.t
  r1 : tree
  s2 : tree
  B2 : Ok s2
  H4 : Ok l1
  H5 : Ok r1
  H6 : lt_tree x1 l1
  H7 : gt_tree x1 r1
  y2 : X.t
  H : X.eq y x2
  H1 : InT y s2
  H3 : X.eq y x2
  ============================
   (InT y (Node _x l1 x1 r1))


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (2) > 
Goal:
  
  _x : I.t
  l1 : tree
  x1 : X.t
  r1 : tree
  s2 : tree
  B2 : Ok s2
  H4 : Ok l1
  H5 : Ok r1
  H6 : lt_tree x1 l1
  H7 : gt_tree x1 r1
  y2 : X.t
  H : X.eq y x2
  H1 : InT y s2
  H3 : X.eq y x2
  ============================
   (InT y (Node _x l1 x1 r1))


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (3) > 
Goal:
  
  _x : I.t
  l1 : tree
  x1 : X.t
  r1 : tree
  s2 : tree
  B2 : Ok s2
  H4 : Ok l1
  H5 : Ok r1
  H6 : lt_tree x1 l1
  H7 : gt_tree x1 r1
  y2 : X.t
  H : X.eq y x2
  H1 : InT y s2
  H3 : X.eq y x2
  ============================
   (InT y (Node _x l1 x1 r1))


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  _x : I.t
  l1 : tree
  x1 : X.t
  r1 : tree
  s2 : tree
  B2 : Ok s2
  H4 : Ok l1
  H5 : Ok r1
  H6 : lt_tree x1 l1
  H7 : gt_tree x1 r1
  y2 : X.t
  H : X.eq y x2
  H1 : InT y s2
  H3 : X.eq y x2
  ============================
   (InT y (Node _x l1 x1 r1))


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (2) > 
Goal:
  
  _x : I.t
  l1 : tree
  x1 : X.t
  r1 : tree
  s2 : tree
  B2 : Ok s2
  H4 : Ok l1
  H5 : Ok r1
  H6 : lt_tree x1 l1
  H7 :
