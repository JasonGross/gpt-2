======== SAMPLE 1 ========

  H0 : Ok s
  H2 : X.eq x a
  ============================
   (X.eq x a \/ In x s)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (2) > 
Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  eqaut := Equivalence_Transitive : Assured shorthand
  eqaut : Term -> Prop
  h : t
  x : X.t
  e : elt
  H : In x m -> False
  H0 : Ok s
  H2 : X.eq x a
  ============================
   (X.eq x a \/ In x s)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  eqaut := Equivalence_Transitive : Assured shorthand
  eqaut : Term -> Prop
  h : t
  x : X.t
  e : elt
  H : In x m -> False
  H0 : Ok s
  H2 : X.eq x a
  ============================
   (X.eq x a \/ In x s)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (2) > 
Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  eqaut := Equivalence_Transitive : Assured shorthand
  eqaut : Term -> Prop
  h : t
  x : X.t
  e : elt
  H : In x m -> False
  H0 : Ok s
  H2 : X.eq x a
  ============================
   (X.eq x a \/ In x s)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (3) > 
Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  eqaut := Equivalence_Transitive : Assured shorthand
  eqaut : Term -> Prop
  h : t
  x : X.t
  e : elt
  H : In x m -> False
  H0 : Ok s
  H2 : X.eq x a
  ============================
   (X.eq x a \/ In x s)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  eqaut := Equivalence_Transitive : Assured shorthand
  eqaut : Term -> Prop
  h : t
  x : X.t
  e : elt
  H : In x m -> False
  H0 : Ok s
  H2 : X.eq x a
  ============================
   (X.eq x a \/ In x s)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id;
