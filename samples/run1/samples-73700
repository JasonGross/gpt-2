======== SAMPLE 1 ========
 (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f : option elt -> option elt' -> option elt''
  k : X.t
  e : elt
  m : list (X.t * elt)
  IHm : Sorted (ltk (elt:=elt)) m ->
        forall m' : list (X.t * elt'),
        Sorted (ltk (elt:=elt')) m' ->
        forall x : key,
        find (elt:=oee') x (combine m m') =
        at_least_one (find (elt:=elt) x m) (find (elt:=elt') x m')
  Hm : Sorted (ltk (elt:=elt)) ((k, e) :: m)
  k' : X.t
  e' : elt'
  m' : list (X.t * elt')
  IHm' : Sorted (ltk (elt:=elt')) m' ->
         forall x : key,
         find (elt:=oee') x (combine ((k, e) :: m) m') =
         at_least_one (find (elt:=elt) x ((k, e) :: m) :: x) (find (elt:=elt') x m')
  Hm' : Sorted (ltk (elt:=elt')) ((k', e') :: m')
  x : key
  H1 : Sorted (ltk (elt:=elt)) m
  H2 : HdRel (ltk (elt:=elt)) (k, e) m
  H5 : Sorted (ltk (elt:=elt')) m'
  H6 : HdRel (ltk (elt:=elt')) (k', e') m'
  H8 : Sorted (ltk (elt:=elt')) m'
  H7 : HdRel (ltk (elt:=elt')) (k', e') m'
  H9 : HdRel (ltk (elt:=elt')) (k', e') m
  H8' : Sorted (ltk (elt:=elt')) m'
  ============================
   (None = at_least_one None None)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (2) > 
Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f : option elt -> option elt' -> option elt''
  k : X.t
  e : elt
  m : list (X.t * elt)
  IHm : Sorted (ltk (elt:=elt)) m ->
        forall m' : list (X.t * elt'),
        Sorted (ltk (elt:=elt')) m' ->
        forall x : key,
        find (elt:=oee') x (combine m m') =
        at_least_one (find (elt:=elt) x m) (find (elt:=elt') x m')
  Hm : Sorted (ltk (elt:=elt)) ((k, e) :: m)
  k' : X.t
  e' : elt'
  m' : list (X.t * elt')
  IHm' : Sorted (ltk (elt:=elt')) m' ->
         forall x : key,
         find (elt:=oee') x (combine ((k, e) :: m) m') =
         at_least_one (find (elt:=elt) x ((k, e)
