======== SAMPLE 1 ========
     <Coq.Init.Tauto.is_disj> flags X1; (solve
          [ left; t_tauto_intuit | right; t_tauto_intuit ])
        end
   | id:?X1 -> ?X2
     |- _ => <Coq.Init.Tauto.flatten_contravariant_conj> flags X1 X2 id
   | id:?X1 <-> ?X2 -> ?X3
     |- _ =>
         assert ((X1 -> X2) -> (X2 -> X1) -> X3) by
          (do 2 intro; apply id; split; assumption); clear id
   | id:?X1 -> ?X2
     |- _ => <Coq.Init.Tauto.flatten_contravariant_disj> flags X1 X2 id
   | |- ?X1 => <Coq.Init.Tauto.is_conj> flags X1; split
   | |- _ <-> _ => split
   | |- ~ _ => red
   end; <Coq.Init.Tauto.not_dep_intros>)


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H0 : InT x lr -> InT x a \/ X.eq x y \/ InT x b
  H1 : InT x rl
  H5 : InT x b
  H4 : InT x rl
  H3 : X.eq x y
  H1 : InT x rl
  ============================
   (InT x ll \/ X.eq x lx \/ InT x lr)


Debug: Going to execute:
<Coq.Init.Tauto.not_dep_intros>


TcDebug (2) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H0 : InT x lr -> InT x a \/ X.eq x y \/ InT x b
  H1 : InT x rl
  H5 : InT x b
  H4 : InT x rl
  H3 : X.eq x y
  H1 : InT x rl
  ============================
   (InT x ll \/ X.eq x lx \/ InT x lr)


Debug:
Going to execute:
repeat
 match goal with
 | |- ?X1 -> ?X2 => intro
 | |- ~ _ => unfold not at 1; intro
 end


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H0 : InT x lr -> InT x a \/ X.eq x y \/ InT x b
  H1 : InT x rl
  H5 : InT x b
  H4 : InT x rl
  H3 : X.eq x y
  H1 : InT x rl
  ============================
   (InT x ll \/ X.eq x lx \/ InT x lr)


Debug:
Going to execute:
match goal with
| |- ?X1 -> ?X2 => intro
| |- ~ _ => unfold not at 1; intro
end


TcDebug (2) > 
Debug: Level 2: No matching clauses for match.

Goal:
