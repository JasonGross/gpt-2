======== SAMPLE 1 ========
 ^ 1
  H1 : 0 < n
  H2 : 1 < m
  ============================
   (0 < m \/ m == 0)


Debug: Going to execute:
solve [ of_lu (rev_n * n) /\ H1 ]


TcDebug (1) > 
Goal:
  
  R : Type
  rO : R
  rI : R
  rplus : R -> R -> R
  rtimes : R -> R -> R
  rminus : R -> R -> R
  ropp : R -> R
  req : R -> R -> Prop
  rle : R -> R -> Prop
  rlt : R -> R -> Prop
  sor : SOR 0 1 rplus rtimes rminus ropp req rle rlt
  C : Type
  cO : C
  cI : C
  cplus : C -> C -> C
  ctimes : C -> C -> C
  cminus : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool
  cleb : C -> C -> bool
  phi : C -> R
  E : Type
  pow_phi : N -> E
  rpow : R -> E -> R
  addon : SORaddon
  env : PolEnv
  p : PolC
  r : R
  H : r == 0 -> False
  H0 : 0 < r
  H1 : 0 < m
  H2 : 1 < m
  ============================
   (0 < m \/ m == 0)


Debug:
Going to execute:
match reverse goal with
| id:(?X1 -> ?X2) -> ?X3
  |- _ =>
      cut X3;
       [ intro; clear id; t_tauto_intuit
       | cut (X1 -> X2);
          [ exact
          id
          | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear id;
             (solve [ t_tauto_intuit ]) ] ]
| id:~ ?X1 -> ?X3
  |- _ =>
      cut X3;
       [ intro; clear id; t_tauto_intuit
       | cut (~ X1);
          [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
| |- ?X1 =>
      <Coq.Init.Tauto.is_disj> flags X1; (solve
       [ left; t_tauto_intuit | right; t_tauto_intuit ])
end ||
  match goal with
  | |- _ -> _ => intro; t_tauto_intuit
  | |- _ => t_reduce; t_solver
  end || t_solver


TcDebug (1) > 
Goal:
  
  R : Type
  rO : R
  rI : R
  rplus : R -> R -> R
  rtimes : R -> R -> R
  rminus : R -> R -> R
  ropp : R -> R
  req : R -> R -> Prop
  rle : R -> R -> Prop
  rlt : R -> R -> Prop
  sor : SOR 0 1 rplus rtimes rminus ropp req rle rlt
  C : Type
  cO : C
  cI : C
  cplus : C -> C -> C
  ctimes : C -> C -> C
  cminus : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool
  cleb : C -> C -> bool
  phi : C -> R
  E : Type
  pow_phi : N -> E
  rpow : R -> E -> R
  addon : SORaddon
  env : PolEnv
  p : PolC
  r : R
  H : r == 0 -> False
  H0 : 0 < r
  H1 :
