======== SAMPLE 1 ========
' : list elt, In x s -> In y s' -> E.eq x y \/ In y s)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (2) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : Inf x s
  C : X.eq x x'
  y : elt
  H4 : In y s'
  H6 : In y s
  H5 : X.eq y y x'
  H3 : In y s
  H7 : X.eq y x'
  ============================
   (In y s)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (2) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : Inf x s
  C : X.eq x x'
  y : elt
  H4 : In y s'
  H6 : In y s
  H5 : X.eq y y x'
  H3 : In y s
  H7 : X.eq y x'
  ============================
   (In y s)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (3) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : Inf x s
  C : X.eq x x'
  y : elt
  H4 : In y s'
  H6 : In y s
  H5 : X.eq y y x'
  H3 : In y s
  H7 : X.eq y x'
  ============================
   (In y s)


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : elt
  s' : list elt
  H : Sorted X.lt s'
  H0 : Inf x' s'
  H1 : Sorted X.lt s
  H2 : Inf x s
  C : X.eq x x'
  y : elt
  H4 : In y s'
  H6 : In y s
  H5 : X.eq y y x'
  H3 : In y s
  H7 : X.eq y x'
  ============================
   (In y s)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (2) > 
Goal:
  
  x : elt
  s : list elt
  IH : forall s' : t, Ok s -> Ok s' -> equal s s' = true <-> Equal s s'
  x' : el
