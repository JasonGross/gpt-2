======== SAMPLE 1 ========



Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (2) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H6 : Ok lr
  H7 : Ok rl
  H8 : lt_tree x' lr
  H9 : gt_tree x' rl
  H2 : X.eq y x -> False
  H10 : Ok ll
  H11 : Ok lr
  H12 : lt_tree lx ll
  H13 : gt_tree lx lr
  H3 : InT y lr
  ============================
   (InT y lr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (3) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H6 : Ok lr
  H7 : Ok rl
  H8 : lt_tree x' lr
  H9 : gt_tree x' rl
  H2 : X.eq y x -> False
  H10 : Ok ll
  H11 : Ok lr
  H12 : lt_tree lx ll
  H13 : gt_tree lx lr
  H3 : InT y lr
  ============================
   (InT y lr)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H6 : Ok lr
  H7 : Ok rl
  H8 : lt_tree x' lr
  H9 : gt_tree x' rl
  H2 : X.eq y x -> False
  H10 : Ok ll
  H11 : Ok lr
  H12 : lt_tree lx ll
  H13 : gt_tree lx lr
  H3 : InT y lr
  ============================
   (InT y lr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (2) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
  a : tree
  y : X.t
  b : tree
  H6 : Ok lr
  H7 : Ok rl
  H8 : lt_tree x' lr
  H9 : gt_tree x' rl
  H2 : X.eq y x -> False
  H10 : Ok ll
  H11 : Ok lr
  H12 : lt_tree lx ll
  H13 : gt_tree lx lr
  H3 : InT y lr
  ============================
   (InT y lr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (2) > 
Goal:
  
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rl : tree
  rx : X.t
  rr : tree
