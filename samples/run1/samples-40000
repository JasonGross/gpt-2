======== SAMPLE 1 ========
  H0 : bst r
  H1 : gt_tree y r
  H2 : bst ll
  H3 : bst rl
  H4 : lt_tree y l
  H5 : gt_tree y rl
  y0 : key
  H6 : In y0 l
  H7 : In y0 (Node c l y rl z d r0 x d r1 r2)
  l : X.lt y0 x
  H8 : In y0 (Node c l y rl z d r0 x d r1 r2)
  ============================
   (cnf_tree y0 l)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (2) > 
Goal:
  
  elt : Type
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  lh : int
  Hlr : forall (x : elt) (d : elt) (r : t elt) (y : elt),
        bst lr ->
        bst r ->
        lt_tree x lr ->
        gt_tree x r -> find y (join lr x d r) = find y (create lr x d r)
  x : elt
  d : elt
  rl : t elt
  rx : key
  rd : elt
  rr : t elt
  rh : int
  Hrl : forall y : key,
        bst (Node ll lx ld lr lh) ->
        bst rl ->
        lt_tree x (Node ll lx ld lr lh) ->
        gt_tree x rl ->
        find y (join (Node ll lx ld lr lh) x d rl) =
        find y (create (Node ll lx ld lr lh) x d rl)
  LE : 0 <= gt_tree x (Node ll lx ld lr lh)
  y0 : key
  H1 : bst lr
  H2 : lt_tree y (Node ll lx ld lr lh)
  H3 : gt_tree y (Node rl rx rd rr rh)
  H4 : bst ll
  H5 : lt_tree y (Node ll lx ld lr lh)
  y0 : key
  H6 : In y0 (Node c l y rl z d r0 x d r1 r2)
  l : X.lt y0 x
  H8 : In y0 (Node c l y rl z d r0 x d r1 r2)
  ============================
   (cnf_tree y0 l)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  ll : t elt
  lx : key
  ld : elt
  lr : t elt
  lh : int
  Hlr : forall (x : elt) (d : elt) (r : t elt) (y : elt),
        bst lr ->
        bst r ->
        lt_tree x lr ->
        gt_tree x r -> find y (join lr x d r) = find y (create lr x d r)
  x : elt
  d : elt
  rl : t elt
  rx : key
  rd : elt
  rr : t elt
  rh : int
  Hrl : forall y : key,
        bst (Node ll lx ld lr lh)
