======== SAMPLE 1 ========
 elt', bst m' -> bst (mapr m')
  mapl_f0 : forall (x : X.t) (m : t elt),
            bst m ->
            find x (mapl m) =
            match find x m with
            | Some d => f0 x (Some d) None
            | None => None
            end
  mapr_f0 : forall (x : X.t) (m' : t elt'),
            bst m' ->
            find x (mapr m') =
            match find x m' with
            | Some d' => f0 x None (Some d')
            | None => None
            end
  f0_compat : forall (x x' : X.t) (o : option elt) (o' : option elt'),
              X.eq x x' -> f0 x o o' = f0 x' o o'
  l1 : t elt
  x1 : key
  d1 : elt
  r1 : t elt
  _x : int
  l2' : t elt'
  o2 : option elt'
  r2' : t elt'
  m2 : t elt'
  e1 : split x1 m2 = << l2', o2, r2' >>
  e2 : elt''
  e3 : f x1 d1 o2 = Some e2
  H0 : bst m2
  H1 : bst l1
  H2 : bst r1
  H3 : lt_tree x1 l1
  H4 : gt_tree x1 r1
  y : key
  H5 : forall y : key, In y r2' <-> In y m2 /\ X.lt x1 y
  H6 : bst l2'
  H7 : bst r2'
  Hy : In y (map2_opt l1 l2')
  H8 : In y l2'
  H9 : In y l2' -> In y m2 /\ X.lt y x1
  H10 : In y m2 /\ X.lt y x1 -> In y l2'
  H11 : bst r2' -> bst (map2_opt r1 r2')
  H5 : forall y : key, In y m2 /\ X.lt y x1
  H12 : bst (map2_opt l1 l2')
  ============================
   (X.lt y x1)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id || idnot


TcDebug (1) > 
Goal:
  
  elt : Type
  elt' : Type
  elt'' : Type
  f0 : key -> option elt -> option elt' -> option elt''
  f : key -> elt -> option elt' -> option elt''
  mapl : t elt -> t elt''
  mapr : t elt' -> t elt''
  f0_f : forall (x : key) (d : elt) (o : option elt'),
          f x d o = f0 x (Some d) o
  mapl_bst : forall m : t elt, bst m -> bst (mapl m)
  mapr_bst : forall m' : t elt', bst m' -> bst (mapr m')
  mapl_f0 : forall (x : X.t) (m : t elt),
             bst m ->
         
