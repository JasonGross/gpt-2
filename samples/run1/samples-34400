======== SAMPLE 1 ========
 end


TcDebug (5) > 
Debug: Level 5: evaluation returns
<tactic closure>


Goal:
  
  s1 : tree
  b : bool
  s2 : tree
  s'1 : tree
  b' : bool
  H : exists exist : False \/
       ~ X.eq x (diff s1 s') <->
        InT x s /\ ~ InT x s'1 \/ InT x s /\ ~ (b' + s2)
  ============================
   (InT x s)


Debug: Going to execute:
idtac


TcDebug (4) > 
Goal:
  
  s1 : tree
  b : bool
  s2 : tree
  s'1 : tree
  b' : bool
  H : exists exist : False \/
       ~ X.eq x (diff s1 s') <->
        InT x s /\ ~ InT x s'1 \/ InT x s /\ ~ (b' + s2)
  ============================
   (InT x s)


Debug: Going to execute:
fun => <ltac_plugin::idtac_plugin@0>


TcDebug (5) > 
Goal:
  
  s1 : tree
  b : bool
  s2 : tree
  s'1 : tree
  b' : bool
  H : exists exist : False \/
       ~ X.eq x (diff s1 s') <->
        InT x s /\ ~ InT x s'1 \/ InT x s /\ ~ (b' + s2)
  ============================
   True s


Debug: Going to execute:
t_tauto_intuit


TcDebug (5) > 
Goal:
  
  s1 : tree
  b : bool
  s2 : tree
  s'1 : tree
  b' : bool
  H : exists exist : False \/
       ~ X.eq x (diff s1 s') <->
        InT x s /\ ~ InT x s'1 \/ InT x s /\ ~ (b' + s2)
  ============================
   True s


Debug:
Going to execute:
<Coq.Init.Tauto.simplif> flags;
 <Coq.Init.Tauto.axioms> flags ||
   match reverse goal with
   | id:(?X1 -> ?X2) -> ?X3
     |- _ =>
          cut X3;
           [ intro; clear id; t_tauto_intuit
           | cut (X1 -> X2);
              [ exact
              id
              | generalize (fun y : X2 => id (fun x : X1 => y)); intro; clear
                id; (solve [ t_tauto_intuit ]) ] ]
   | id:~ ?X1 -> ?X3
     |- _ =>
          cut X3;
           [ intro; clear id; t_tauto_intuit
           | cut (~ X1);
              [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]
   | | cut (~ X1); [ exact id | clear id; intro; (solve [ t_tauto_intuit ]) ] ]

   | |- ?X1 =>
         <Coq.Init.Tauto.is_disj> flags X1; (solve
           [ left; t_tauto_intuit | right;
