======== SAMPLE 1 ========
           make_conj (eval_clause env) acc
  acc : list clause
  c : clause
  H1 : eval_clause env c -> eval_clause env t \/ eval_clause env a
  H2 : make_conj (eval_clause env) acc
  H3 : make_conj (eval_clause env) f x
  H : eval_clause env t
  ============================
   (eval_clause env a <->
     make_conj (eval_clause env) f x)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (2) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                    eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
               unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
                deduce t t' = Some u ->
                forall env : Env, eval' env t -> eval' env t' -> eval' env u
  env : Env
  p : (Term' * Annot)%type
  t : list clause
  f : cnf
  H0 : make_conj (eval_clause env) acc
  H1 : eval_clause env c -> eval_clause env t \/ eval_clause env a
  H2 : make_conj (eval_clause env) acc
  H3 : make_conj (eval_clause env) f x
  H : eval_clause env t
  ============================
   (eval_clause env a <->
     make_conj (eval_clause env) f x)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  Env : Type
  Term : Type
  Term' : Type
  Annot : Type
  unsat : Term' -> bool
  deduce : Term' -> Term' -> option Term'
  normalise : Term -> Annot -> cnf
  negate : Term -> Annot -> cnf
  eval' : Env -> Term' -> Prop
  no_middle_eval' : forall (env : Env) (d : Term'),
                    eval' env d \/ ~ eval' env d
  unsat_prop : forall t : Term',
               unsat t = true -> forall env : Env, eval' env t -> False
  deduce_prop : forall t t' u : Term',
                deduce t t' = Some u ->
                forall env : Env, eval' env t -> eval' env t' -> eval' env u
  env : Env
  p : (Term' * Annot)%type
  t : list clause
  f : cnf
  H0 : make_conj (eval_clause env) acc
  H1 : eval_clause env c -> eval_clause env t \/ eval_clause env a
  H2 : make_conj (eval_clause env) acc
  H3 : make_conj (eval_cl
