======== SAMPLE 1 ========
:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (3) > 
Goal:
  
  elt : Type
  x : key
  e' : elt
  H : MapsTo x e' ((x, e) :: l)
  ============================
   (MapsTo x e (add y e' (add e' e)))


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : key
  e' : elt
  H : MapsTo x e' ((x, e) :: l)
  ============================
   (MapsTo x e (add y e' (add e' e)))


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  e' : elt
  H : MapsTo x e' ((x, e) :: l)
  ============================
   (MapsTo x e (add y e' (add e' e)))


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  e' : elt
  H : MapsTo x e' ((x, e) :: l)
  ============================
   (MapsTo x e (add y e' (add e' e)))


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  e' : elt
  H : MapsTo x e' ((x, e) :: l)
  ============================
   (MapsTo x e (add y e' (add e' e)))


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  e' : elt
  H : MapsTo x e' ((x, e) :: l)
  ============================
   (MapsTo x e (add y e' (add e' e)))


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (3) > 
Goal:
  
  elt : Type
  x : key
  e' : elt
  H : MapsTo x e' ((x, e) :: l)
  ============================
   (MapsTo x e (add y e' (add e' e)))


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : key
  e' : elt
  H : MapsTo x e' ((x, e) :: l)
  ============================
   (MapsTo x e (add y e' (add e' e)))


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (2) > 
Goal:
  
  elt : Type
  x : key
  e' : elt
  H : MapsTo x e' ((x, e) :: l)
  ============================
   (MapsTo x e (add y e' (add e' e)))


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (2) > 
Goal:

