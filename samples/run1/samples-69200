======== SAMPLE 1 ========



TcDebug (4) > 
Goal:
  
  i : Color.t
  w : Vector.t
  x' : X.t
  rl : tree
  rx : X.t
  rr : tree
  IHl : forall (x : X.t) (y : elt),
        Ok (Rd ll lx lr) ->
        InT y (del x (Rd ll lx lr)) <-> InT y (Rd ll lx lr) /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Rd ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Rd ll lx lr)
  H8 : gt_tree x' r
  H : InT y (Rd ll lx lr)
  H2 : X.eq y x -> False
  ============================
   (InT y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_unit_or_eq> flags X1


TcDebug (4) > 
Goal:
  
  i : Color.t
  w : Vector.t
  x' : X.t
  rl : tree
  rx : X.t
  rr : tree
  IHl : forall (x : X.t) (y : elt),
        Ok (Rd ll lx lr) ->
        InT y (del x (Rd ll lx lr)) <-> InT y (Rd ll lx lr) /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Rd ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Rd ll lx lr)
  H8 : gt_tree x' r
  H : InT y (Rd ll lx lr)
  H2 : X.eq y x -> False
  ============================
   (InT y r)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_unit_or_eq@0>


TcDebug (5) > 
Goal:
  
  i : Color.t
  w : Vector.t
  x' : X.t
  rl : tree
  rx : X.t
  rr : tree
  IHl : forall (x : X.t) (y : elt),
        Ok (Rd ll lx lr) ->
        InT y (del x (Rd ll lx lr)) <-> InT y (Rd ll lx lr) /\ ~ X.eq y x
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (del x r) <-> InT y r /\ ~ X.eq y x
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok (Rd ll lx lr)
  H6 : Ok r
  H7 : lt_tree x' (Rd ll lx lr)
  H8 : gt_tree x' r
  H : InT y (Rd ll lx lr)
  H2 : X.eq y x -> False
  ============================
   (InT y r)


Debug: Going
