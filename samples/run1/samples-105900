======== SAMPLE 1 ========
   (X.lt x yr)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (5) > 
Goal:
  
  elt : Type
  x : X.t
  l : t elt
  y : key
  d : elt
  r : t elt
  _x : int
  _x0 : X.lt y x
  rl : t elt
  o : option elt
  rr : t elt
  e1 : split x r = << rl, o, rr >>
  y0 : key
  H0 : bst l
  H1 : bst r
  H2 : lt_tree y l
  H3 : gt_tree y r
  H : forall y : key, In y rl <-> In y r /\ X.lt y x
  H6 : X.lt y0 x
  H4 : In y0 l
  ============================
   (X.lt x yr)


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (5) > 
Debug: Level 5: evaluation returns
<tactic closure>


Goal:
  
  elt : Type
  x : X.t
  l : t elt
  y : key
  d : elt
  r : t elt
  _x : int
  _x0 : X.lt y x
  rl : t elt
  o : option elt
  rr : t elt
  e1 : split x r = << rl, o, rr >>
  y0 : key
  H0 : bst l
  H1 : bst r
  H2 : lt_tree y l
  H3 : gt_tree y r
  H : forall y : key, In y rl <-> In y r /\ X.lt y x
  H6 : X.lt y0 x
  H4 : In y0 l
  ============================
   (X.lt x yr)


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (4) > 
Goal:
  
  elt : Type
  x : X.t
  l : t elt
  y : key
  d : elt
  r : t elt
  _x : int
  _x0 : X.lt y x
  rl : t elt
  o : option elt
  rr : t elt
  e1 : split x r = << rl, o, rr >>
  y0 : key
  H0 : bst l
  H1 : bst r
  H2 : lt_tree y l
  H3 : gt_tree y r
  H : forall y : key, In y rl <-> In y r /\ X.lt y x
  H6 : X.lt y0 x
  H4 : In y0 l
  ============================
   (X.lt x yr)


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (4) > 
Goal:
  
  elt : Type
  x : X.t
  l : t elt
  y : key
  d : elt
  r : t elt
  _x : int
  _x0 : X.lt y x
  rl : t elt
  o : option elt
  rr : t elt
  e1 : split x r = << rl, o, rr >>
  y0 : key
  H0 : bst l
  H1 : bst r
  H2 : lt_tree y l
  H3 : gt_tree y r
  H : forall y : key, In y rl <-> In y r /\ X.lt y x
  H6 : X.lt y0 x
  H4 : In y0 l
  ============================
   (X.lt x yr)


Debug:
