======== SAMPLE 1 ========
_t  s2') <-> In y s2'
  k : key
  e : elt
  s1 : E.t
  Hs1 : s2' <-> In a s1
  ============================
   (In a s2')


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (2) > 
Goal:
  
  s1 : E.t
  s2 : E.t
  Hsl1 : NoDupA eqk (rev (n), s2' -> False)
  Hs1 : NoDupA eqk (rev (n), s2' -> False)
  Hs2 : NoDupA eqk (rev (n), s1 -> False)
  s' : E.t
  Hs': [rev (n), s' -> False]
  a : E.t
  H0 : In a s2'
  H1 : In a s2' -> In a s1 \/ In a s2'
  ============================
   (In a s2')


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (3) > 
Goal:
  
  s1 : E.t
  s2 : E.t
  Hsl1 : NoDupA eqk (rev (n), s2' -> False)
  Hs1 : NoDupA eqk (rev (n), s2' -> False)
  Hs2 : NoDupA eqk (rev (n), s1 -> False)
  s' : E.t
  Hs' : [rev (n), s' -> False]
  a : E.t
  H0 : In a s2'
  H1 : In a s2' -> In a s1 \/ In a s2'
  ============================
   (In a s2')


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (3) > 
Debug: Level 3: evaluation returns
<tactic closure>


Goal:
  
  s1 : E.t
  s2 : E.t
  Hsl1 : NoDupA eqk (rev (n), s2' -> False)
  Hs1 : NoDupA eqk (rev (n), s2' -> False)
  Hs2 : NoDupA eqk (rev (n), s1 -> False)
  s' : E.t
  Hs' : [rev (n), s' -> False]
  a : E.t
  H0 : In a s2'
  H1 : In a s2' -> In a s1 \/ In a s2'
  ============================
   (In a s2')


Debug: Going to execute:
OrderTac.order_loop


TcDebug (2) > 
Goal:
  
  s1 : E.t
  s2 : E.t
  Hsl1 : NoDupA eqk (rev (n), s2' -> False)
  Hs1 : NoDupA eqk (rev (n), s2' -> False)
  Hs2 : NoDupA eqk (rev (n), s1 -> False)
  s' : E.t
  Hs' : [rev (n), s' -> False]
  a : E.t
  H0 : In a s2'
  H1 : In a s2' -> In a s1 \/ In a s2'
  ============================
   (In a s2')


Debug: Going to execute:
fun => <ltac_plugin::order@0>


TcDebug (3) > 
Goal:
  
  s1 : E.t
  s2 : E.t
  Hsl1 : NoDupA eqk (rev (n), s2' -> False)
  Hs1 : NoDupA eqk (rev (n), s2' -> False)
  Hs2 : NoDupA eqk (rev (n), s1 -> False)
  s' : E.t
  Hs' : [
