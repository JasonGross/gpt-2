======== SAMPLE 1 ========
 : R -> C
  req : R -> C -> Prop
  Rsth : Equivalence req
  Reqe : ring_eq_ext radd rmul ropp req
  ARth : almost_ring_theory 0 1 radd rmul rsub ropp req
  C : Type
  cO : C
  cI : C
  cadd : C -> C -> C
  cmul : C -> C -> C
  csub : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool
  phi : C -> R
  CRmorph : ring_morph 0 1 radd rmul rsub ropp req cO cI cadd cmul csub copp
              ceqb phi
  Cpow : Type
  Cp_phi : N -> Cpow
  rpow : R -> Cpow -> R
  pow_th : power_theory 1 rmul req Cp_phi rpow
  n : nat
  M2 : Mon
  P2' : Pol
  LM2 : list (Mon * Pol)
  l : Env R
  p : Pol
  IH : forall P1 : Pol,
       PSubstL P1 LM2 n = Some (PSubstL1 p LM2 n) ->
       MPcond LM2 l -> P1 @ l == (PSubstL1 p LM2 n) @ l
  P3 : Pol
  H0 : [fst M2] * (snd M2) @@ l == P2' @ l /\ MPcond LM2 l
  H' : forall (l : Env R) (P4 : Pol),
       Some p = Some P4 -> M2 @@ l == P2' @ l -> P3 @ l == P4 @ l
  H'1 : M2 @@ l == P2' @ l
  p0 : Pol
  p1 : Pol
  H'2 : MPcond LM2 l = p1 @ l
  H3 : M2 @@ l == P2' @ l
  H'5 : MPcond LM2 l = p1 @ l
  ============================
   (MPcond LM2 l)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (1) > 
Goal:
  
  R : Type
  rO : R
  rI : R
  radd : R -> R -> R
  rmul : R -> R -> R
  rsub : R -> R -> R
  ropp : R -> R
  req : R -> R -> Prop
  Rsth : Equivalence req
  Reqe : ring_eq_ext radd rmul ropp req
  ARth : almost_ring_theory 0 1 radd rmul rsub ropp req
  C : Type
  cO : C
  cI : C
  cadd : C -> C -> C
  cmul : C -> C -> C
  csub : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool
  phi : C -> R
  CRmorph : ring_morph 0 1 radd rmul rsub ropp req cO cI cadd cmul csub copp
              ceqb phi
  Cpow : Type
  Cp_phi : N -> Cpow
  rpow : R -> Cpow -> R
  pow_th : power_theory 1 rmul req Cp_phi rpow
  n : nat
  M2 : Mon
  P2' : Pol
  LM2 : list (Mon * Pol)
  l : Env R
  p : Pol
  IH : forall P1 : Pol,
       PSubstL P1 LM2 n = Some (PSubstL1 p LM2 n) ->
       MPcond LM2 l -> P1 @ l == (PSubstL1 p LM2 n) @ l
  P3 : Pol
  H0 : [fst M2] * (snd M2) @@ l == P2' @ l /\ MPcond LM2 l

