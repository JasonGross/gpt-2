======== SAMPLE 1 ========
 (X.t) x' (Rd (Pc c) x)
  x0 : elt
  H0 : Sorted X.lt l'
  H1 : Inf x' l'
  H2 : Sorted X.lt l
  H3 : Inf x l
  H4 : X.eq x0 x'
  ============================
   (X.eq x0 x \/ In x0 l)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  s : t
  x : elt
  l : list elt
  Hrec : forall (s' : t) (x : elt),
         Ok l -> Ok s' -> In x (diff l s') <-> In x l /\ ~ In x s'
  s' : t
  x' : elt
  l' : list elt
  Hrec' : forall x0 : elt,
          Ok (x :: l) ->
          Ok l' -> In x0 (diff (x :: l) l') <-> In x0 (x :: l) /\ ~ In x0 l'
  H : X.lt x' x
  x0 : elt
  H0 : Sorted X.lt l'
  H1 : Inf x' l'
  H2 : Sorted X.lt l
  H3 : Inf x l
  H4 : X.eq x0 x'
  ============================
   (X.eq x0 x \/ In x0 l)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  s : t
  x : elt
  l : list elt
  Hrec : forall (s' : t) (x : elt),
         Ok l -> Ok s' -> In x (diff l s') <-> In x l /\ ~ In x s'
  s' : t
  x' : elt
  l' : list elt
  Hrec' : forall x0 : elt,
          Ok (x :: l) ->
          Ok l' -> In x0 (diff (x :: l) l') <-> In x0 (x :: l) /\ ~ In x0 l'
  H : X.lt x' x
  x0 : elt
  H0 : Sorted X.lt l'
  H1 : Inf x' l'
  H2 : Sorted X.lt l
  H3 : Inf x l
  H4 : X.eq x0 x'
  ============================
   (X.eq x0 x \/ In x0 l)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  s : t
  x : elt
  l : list elt
  Hrec : forall (s' : t) (x : elt),
         Ok l -> Ok s' -> In x (diff l s') <-> In x l /\ ~ In x s'
  s' : t
  x' : elt
  l' : list elt
  Hrec' : forall x0 : elt,
          Ok (x :: l) ->
          Ok l' -> In x0 (diff (x :: l) l') <-> In x0 (x :: l) /\ ~ In x0 l'
  H : X.lt x' x
  x0 : elt
  H0 : Sorted X.lt l'
  H1 : Inf x' l'
  H2 : Sorted X.lt l
  H3 : Inf x l
  H4 : X.eq x0 x'
  ============================
  
