======== SAMPLE 1 ========
        InT x (append lr rl) \/ X.eq x rx \/ InT x rr)


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (1) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H : InT y (Node rh rl rx rr)
  ============================
   (X.eq y x \/ InT y (Node lh ll lx lr) \/ InT y rl)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_conj@0>


TcDebug (2) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H : InT y (Node rh rl rx rr)
  ============================
   (X.eq y x \/ InT y (Node lh ll lx lr) \/ InT y rl)


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H : InT y (Node rh rl rx rr)
  ============================
   (X.eq y x \/ InT y (Node lh ll lx lr) \/ InT y rl)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H : InT y (Node rh rl rx rr)
  ============================
   (X.eq y x \/ InT y (Node lh ll lx lr) \/ InT y rl)


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  lh : I.t
  ll : tree
  lx : X.t
  lr : tree
  x : elt
  rh : I.t
  rl : tree
  rx : X.t
  rr : tree
  LT : (rh + 2 <? lh) = false
  LT' : (lh + 2 <? rh) = true
  y : elt
  H : InT y (Node rh rl rx rr)
  ============================
   (X.eq y x \/ InT
