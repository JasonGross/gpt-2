======== SAMPLE 1 ========

  
  A : Type
  eqa : Equivalence R
  B : Type
  R' : Relation B
  eqb : B -> B -> False
  R : A -> B
  R_sym : Symmetric R'
  l : list A
  l' : list B
  H1 : R add B (x + y) (R' (x + y))
  ============================
   (R' (y + x) (R' (x + y) (R' (x + l')) -> R' (x + r')))


Debug: Going to execute:
<tauto_plugin::is_conj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  A : Type
  R : A -> A -> Prop
  R' : Relation A
  B : Type
  R' : Relation B
  eqb : B -> B -> False
  R : A -> B
  R_sym : Symmetric R'
  l : list A
  l' : list B
  H1 : R add B (x + y) (R' (x + y))
  ============================
   (R' (y + x) (R' (x + y) (R' (x + l')) -> R' (x + r')))


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (1) > 
Goal:
  
  A : Type
  R : A -> A -> Prop
  R' : Relation A
  B : Type
  R' : Relation B
  eqb : B -> B -> False
  R : A -> B
  R_sym : Symmetric R'
  l : list A
  l' : list B
  H1 : R add B (x + y) (R' (x + y))
  ============================
   (R' (y + x) (R' (x + y) (R' (x + l')) -> R' (x + r')))


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (1) > 
Goal:
  
  A : Type
  R : A -> A -> Prop
  R' : Relation A
  B : Type
  R' : Relation B
  eqb : B -> B -> False
  R : A -> B
  R_sym : Symmetric R'
  l : list A
  l' : list B
  H1 : R add B (x + y) (R' (x + y))
  ============================
   (R' (y + x) (R' (x + y) (R' (x + l')) -> R' (x + r')))


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  A : Type
  R : A -> A -> Prop
  R' : Relation A
  B : Type
  R' : Relation B
  eqb : B -> B -> False
  R : A -> B
  R_sym : Symmetric R'
  l : list A
  l' : list B
  H1 : R add B (x + y) (R' (x + y))
  ============================
   (R' (y + x) (R' (x + y) (R' (x + l')) -> R' (x + r')))


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (1) > 
Goal:
  
  A : Type
  R : A -> A -> Prop
  R' : Relation A
  B : Type
  R' : Relation B
  eqb : B -> B -> False
  R : A -> B
  R_sym : Symmetric R'
  l : list A
  l' : list B
  H1
