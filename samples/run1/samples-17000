======== SAMPLE 1 ========
  x : nat
  l : t elt
  _x : height (Leaf elt) > height r + 2
  e0 : X.eq x x'
  l0 : list elt
  H : In y (Node l x d (Leaf elt) _x e0 r)
  ============================
   ((X.eq y x) -> In y l \/ In y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id


TcDebug (1) > 
Goal:
  
  l : t elt
  x : nat
  l : t elt
  _x : height (Leaf elt) > height r + 2
  e0 : X.eq x x'
  l0 : list elt
  H : In y (Node l x d (Leaf elt) _x e0 r)
  ============================
   ((X.eq y x) -> In y l \/ In y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (1) > 
Goal:
  
  l : t elt
  x : nat
  l : t elt
  _x : height (Leaf elt) > height r + 2
  e0 : X.eq x x'
  l0 : list elt
  H : In y (Node l x d (Leaf elt) _x e0 r)
  ============================
   ((X.eq y x) -> In y l \/ In y r)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (2) > 
Goal:
  
  l : t elt
  x : nat
  l : t elt
  _x : height (Leaf elt) > height r + 2
  e0 : X.eq x x'
  l0 : list elt
  H : In y (Node l x d (Leaf elt) _x e0 r)
  ============================
   ((X.eq y x) -> In y l \/ In y r)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  l : t elt
  x : nat
  l : t elt
  _x : height (Leaf elt) > height r + 2
  e0 : X.eq x x'
  l0 : list elt
  H : In y (Node l x d (Leaf elt) _x e0 r)
  ============================
   ((X.eq y x) -> In y l \/ In y r)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (1) > 
Goal:
  
  l : t elt
  x : nat
  l : t elt
  _x : height (Leaf elt) > height r + 2
  e0 : X.eq x x'
  l0 : list elt
  H : In y (Node l x d (Leaf elt) _x e0 r)
  ============================
   ((X.eq y x) -> In y l \/ In y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro


TcDebug (1) > 
Goal:
  
  l : t elt
  x : nat
  l : t elt
  _x : height (Leaf elt) > height r + 2
  e0 : X.eq x x'
  l0 : list elt
  H : In y (Node l x d (Leaf elt) _x e0 r)
  ============================
   ((X.eq y x) -> In y l \/ In y r)


Debug: Going to execute:
<Coq.
