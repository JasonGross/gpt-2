======== SAMPLE 1 ========

Goal:
    x : positive  H : false = true  a : E.t  H0 : forall x : E.t, a * x == a * x
  ============================
   False


Debug: Going to execute:
intro


TcDebug (4) > 
Goal:
    x : positive  H : false = true  a : E.t  H0 : forall x : E.t, a * x == a * x
  ============================
   False


Debug: Going to execute:
try clear (exact (fun n : nat => x : positive -> neg) n in (x :: nil))


TcDebug (4) > 
Goal:
    x : positive  H : false = true  a : E.t  H0 : forall x : E.t, a * x == a * x
  ============================
   False


Debug: Going to execute:
clear exact (fun (n : nat) => x : positive -> neg)


TcDebug (4) > 
Goal:
    x : positive  H : false = true  a : E.t  H0 : forall x : E.t, a * x == a * x
  ============================
   False


Debug: Going to execute:
clear exact (fun n : nat => x : positive -> neg)


TcDebug (4) > 
Goal:
    x : positive  H : false = true  a : E.t  H0 : forall x : E.t, a * x == a * x
  ============================
   False


Debug: Going to execute:
<ltac_plugin::clear@0> $1


TcDebug (0) > 
Goal:
    x : positive  H : false = false  a : E.t  H0 : forall x : E.t, a * x == a * x
  ============================
   False


Debug: Going to execute:
<MX.Goal> flags X1; elim id


TcDebug (0) > 
Goal:
    x : positive  H : false = false  a : E.t  H0 : forall x : E.t, a * x == a * x
  ============================
   False


Debug: Going to execute:
<ltac_plugin::clear@0> $1


TcDebug (0) > 
Debug: Level 0: No flags for "T1" to change.

Debug: Level 0: No flags for "T1" to change.

Goal:
    x : positive  H : false = false  a : E.t  H0 : forall x : E.t, a * x == a * x
  ============================
   False


Debug: Going to execute:
<ltac_plugin::clear@0> $1


TcDebug (0) > 
Goal:
    x : positive  H : false = false  a : E.t  H0 : forall x : E.t, a * x == a * x
  ============================
   False


Debug: Going to execute:
<Coq.Init.Tauto.not_dep_intros>;
 repeat
  repeat
   match goal with
   | id:(?X1 -> ?X2) -> ?X3
     |- _ =>
       match reverse goal with
       | id:~ ?X1 -> ?X3
      |- _ =>
           match reverse goal with
           | id:X1 -> ?X2
       |- _ => id:X1 -> ?X2
        end
       | id:?X1 -> ?X3
       |- _ =>
           match reverse goal with
           | id:X1 -> ?X2
        |- _ => id:X1 -> ?X2
            end
   
