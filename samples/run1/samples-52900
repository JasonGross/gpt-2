======== SAMPLE 1 ========



TcDebug (2) > 
Debug: Level 2: evaluation returns
<tactic closure>


Goal:
  
  R : Type
  rO : R
  rI : R
  rplus : R -> R -> R
  rtimes : R -> R -> R
  rminus : R -> R -> R
  ropp : R -> R
  req : R -> R -> Prop
  rle : R -> R -> Prop
  rlt : R -> R -> Prop
  sor : SOR 0 1 rplus rtimes rminus ropp req rle rlt
  C : Type
  cO : C
  cI : C
  cplus : C -> C -> C
  ctimes : C -> C -> C
  cminus : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool
  cleb : C -> C -> bool
  phi : C -> R
  E : Type
  pow_phi : BinNums.N -> E
  rpow : R -> E -> R
  addon : SORaddon
  P2 : Pol
  p : Pol
  p0 : positive
  P3 : Pol
  IHP2 : forall (M : Mon) (l : list R),
         let (Q, A) :=zos.check_monpol l in *
         P2 @ l == P2 @ l * pow_pos Z.mul (Z.pos fr) M @@ l * pow_pos Z.mul (Z.pos fr) M @@ l
  p0 : positive
  L := fun k : positive =>
        let (Q, A) :=zos.check_monpol l in *
        let (Q, B) :=zos.check_monpol l in
        P3 @ l == P2 @ l * pow_pos Z.mul (Z.pos fr) M @@ l * pow_pos Z.mul (Z.pos fr) M @@ l * pow_pos Z.mul (Z.pos fr) M @@ l *
        p == P2 @ l * pow_pos Z.mul (Z.pos fr) M @@ l * pow_pos Z.mul (Z.pos fr) M @@ l
  p0 : positive
  ============================
   (b = 2 * p0)


Debug:
Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id


TcDebug (1) > 
Goal:
  
  R : Type
  rO : R
  rI : R
  rplus : R -> R -> R
  rtimes : R -> R -> R
  rminus : R -> R -> R
  ropp : R -> R
  req : R -> R -> Prop
  rle : R -> R -> Prop
  rlt : R -> R -> Prop
  sor : SOR 0 1 rplus rtimes rminus ropp req rle rlt
  C : Type
  cO : C
  cI : C
  cplus : C -> C -> C
  ctimes : C -> C -> C
  cminus : C -> C -> C
  copp : C -> C
  ceqb : C -> C -> bool
  cleb : C -> C -> bool
  phi : C -> R
  E : Type
  pow_phi : BinNums.N -> E
  rpow : R -> E -> R
  addon : SORaddon
  P2 : Pol
  p : Pol
  p0 : positive
  P3 : Pol
  IHP2 : forall (M : Mon) (l : list R),
        let (Q, A) :=zos.check_monpol l in *
        P2 @ l == P2 @ l * pow_pos Z.mul (Z.pos fr) M @@ l * pow_pos Z.mul (Z.pos fr) M @@ l
  p0 : positive
  ============================
   (b = 2 * p0)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1; elim
