======== SAMPLE 1 ========

  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok l
  H6 : Ok r
  H7 : lt_tree x' l
  H8 : gt_tree x' r
  H : InT y r
  ============================
   (Z.eq y x')


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id


TcDebug (2) > 
Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (del x l) <-> InT y l /\ (X.eq y x -> False)
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (del x r) <-> InT y r /\ (X.eq y x -> False)
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok l
  H6 : Ok r
  H7 : lt_tree x' l
  H8 : gt_tree x' r
  H : InT y r
  ============================
   (Z.eq y x')


Debug:
Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro


TcDebug (2) > 
Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (del x l) <-> InT y l /\ (X.eq y x -> False)
  IHr : forall (x : X.t) (y : elt),
        Ok r -> InT y (del x r) <-> InT y r /\ (X.eq y x -> False)
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok l
  H6 : Ok r
  H7 : lt_tree x' l
  H8 : gt_tree x' r
  H : InT y r
  ============================
   (Z.eq y x')


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1; elim id


TcDebug (2) > 
Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
       Ok l -> InT y (del x l) <-> InT y l /\ (X.eq y x -> False)
  IHr : forall (x : X.t) (y : elt),
       Ok r -> InT y (del x r) <-> InT y r /\ (X.eq y x -> False)
  x : X.t
  y : elt
  H0 : X.lt x x'
  H5 : Ok l
  H6 : Ok r
  H7 : lt_tree x' l
  H8 : gt_tree x' r
  H : InT y r
  ============================
   (Z.eq y x')


Debug: Going to execute:
<Coq.Init.Tauto.is_conj> flags X1


TcDebug (2) > 
Goal:
  
  i : Color.t
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
       Ok l -> InT y (del x l) <-> InT y l /
