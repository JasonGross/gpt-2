======== SAMPLE 1 ========

0 : X.t
  l : TO.t
  x : X.t
  r : t
  _x : I.t
  ll : tree
  lx : X.t
  lr : tree
  l' : t
  m : elt
  e0 : remove_min ll lx lr = (l', m)
  IHt : bst r -> bst (mapl r)
  IHt0 : bst r -> bst (mapl r)
  H0 : bst r
  H1 : bst r -> bst (mapl r)
  ============================
   (check_inconsistent (LE x) l' m <->
    (mem n lx lr \/ cmp e0 m = true) /\
    (mem n lrr = true) /\
    (check_inconsistent (Cmul c' x e' r) m <->
    ((bst (Node c' c' r) (Bst r) x) /\
    ((Bst (Node c' r) m) /\
         (cmp e' r (Bst r) x) (Bst r))))


Debug:
Going to execute:
match reverse goal with
| id:?X1
  |- _ => <Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id
| id:_ <-> _ |- _ => elim id; do 2 intro; clear id
| id:~ _ |- _ => red in id
| id:?X1 |- _ => <Coq.Init.Tauto.is_disj> flags X1; elim id; intro; clear id
| id0:?X1 -> ?X2, id1:?X1 |- _ => assert X2; [ exact (id0 id1) | clear id0 ]
| id:?X1 -> ?X2
  |- _ =>
      <Coq.Init.Tauto.is_unit_or_eq> flags X1; cut X2;
       [ intro; clear id | cut X1; [ exact id | constructor 1; fail ] ]
| id:?X1 -> ?X2
  |- _ => <Coq.Init.Tauto.flatten_contravariant_conj> flags X1 X2 id
| id:?X1 <-> ?X2 -> ?X3
  |- _ =>
      assert ((X1 -> X2) -> (X2 -> X1) -> X3) by
       (do 2 intro; apply id; split; assumption); clear id
| id:?X1 -> ?X2
  |- _ => <Coq.Init.Tauto.flatten_contravariant_disj> flags X1 X2 id
| |- ?X1 => <Coq.Init.Tauto.is_conj> flags X1; split
| |- _ <-> _ => split
| |- ~ _ => red
end


TcDebug (0) > 
Goal:
  
  elt : Type
  x : key
  q : t elt
  r : t elt
  ll : t elt
  lx : X.t
  lr : t elt
  _x : I.t
  lr' : t elt
  e1 : split x l = << l, (k', m) |- _ =>
          <Coq.Init.Tauto.is_conj> flags X1; elim id; do 2 intro; clear id
            (id0 id1)
            (k', m)
             (bst (Node c' c' r))
             (bst (Node c' r) (Bst r))
              (cmp e' r (Bst r) x (Bst r))
              (bst (Node c' c' r))
     
