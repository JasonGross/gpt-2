======== SAMPLE 1 ========
 InT y lr \/ X.eq y x \/ InT y r
  y : elt
  t_left0 : t
  t_in0 : bool
  t_right0 : t
  IHr : forall x : X.t, Ok r -> InT y t_left0
  H0 : X.lt x' x
  H5 : Ok lr
  H6 : Ok t_left0
  H7 : lt_tree x' lr
  H8 : gt_tree x' r
  H2 : X.eq y x -> False
  H : Ok r
  H4 : X.eq y t_left0
  ============================
   (InT y r)


Debug: Going to execute:
<Coq.Init.Tauto.is_disj> flags X1


TcDebug (5) > 
Goal:
  
  i : I.t
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (split x l)#l <-> InT y l /\ X.lt y x
  x : X.t
  y : elt
  t_left0 : t
  t_in0 : bool
  t_right0 : t
  IHr : forall x : X.t, Ok r -> InT y t_left0
  H0 : X.lt x' x
  H5 : Ok lr
  H6 : Ok t_left0
  H7 : lt_tree x' lr
  H8 : gt_tree x' r
  H2 : X.eq y x -> False
  H : Ok r
  H4 : X.eq y t_left0
  ============================
   (InT y r)


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_disj@0>


TcDebug (6) > 
Goal:
  
  i : I.t
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (split x l)#l <-> InT y l /\ X.lt y x
  x : X.t
  y : elt
  t_left0 : t
  t_in0 : bool
  t_right0 : t
  IHr : forall x : X.t, Ok r -> InT y t_left0
  H0 : X.lt x' x
  H5 : Ok lr
  H6 : Ok t_left0
  H7 : lt_tree x' lr
  H8 : gt_tree x' r
  H2 : X.eq y x -> False
  H : Ok r
  H4 : X.eq y t_left0
  ============================
   (InT y r)


Debug: Going to execute:
<tauto_plugin::is_disj@0>


TcDebug (6) > 
Debug: Level 6: evaluation returns
<tactic closure>


Goal:
  
  i : I.t
  l : tree
  x' : X.t
  r : tree
  IHl : forall (x : X.t) (y : elt),
        Ok l -> InT y (split x l)#l <-> InT y l /\ X.lt y x
  x : X.t
  y : elt
  t_left0 : t
  t_in0 : bool
  t_right0 : t
  IHr : forall x : X.t, Ok r -> InT y t_left0
  H0 : X.lt x' x
  H5 : Ok lr
  H6 : Ok t_left0
  H7 : lt_tree x' lr
  H8 : gt_tree x' r
  H2 : X.eq y x -> False
  H : Ok r
  H4 : X.eq y t_left
