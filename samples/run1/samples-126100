======== SAMPLE 1 ========
1 \/ In x s'
  s' : t
  x : elt
  Hs' : Ok s'
  H : In a s -> False
  H0 : Ok s
  H1 : In x s
  ============================
   (In x s')


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1


TcDebug (3) > 
Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  a : elt
  s : list elt
  IHs : forall (s' : t) (x : elt),
        Ok s -> Ok s' -> In x (union s s') <-> In x s \/ In x s'
  s' : t
  x : elt
  Hs' : Ok s'
  H : In a s -> False
  H0 : Ok s
  H1 : In x s
  ============================
   (In x s')


Debug: Going to execute:
<Coq.Init.Tauto.is_empty> flags X1


TcDebug (3) > 
Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  a : elt
  s : list elt
  IHs : forall (s' : t) (x : elt),
        Ok s -> Ok s' -> In x (union s s') <-> In x s \/ In x s'
  s' : t
  x : elt
  Hs' : Ok s'
  H : In a s -> False
  H0 : Ok s
  H1 : In x s
  ============================
   (In x s')


Debug: Going to execute:
fun tauto_flags X1 => <tauto_plugin::is_empty@0>


TcDebug (4) > 
Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  a : elt
  s : list elt
  IHs : forall (s' : t) (x : elt),
        Ok s -> Ok s' -> In x (union s s') <-> In x s \/ In x s'
  s' : t
  x : elt
  Hs' : Ok s'
  H : In a s -> False
  H0 : Ok s
  H1 : In x s
  ============================
   (In x s')


Debug: Going to execute:
<tauto_plugin::is_empty@0>


TcDebug (4) > 
Debug: Level 4: evaluation returns
<tactic closure>


Goal:
  
  eqr := Equivalence_Reflexive : Reflexive X.eq
  eqsym := Equivalence_Symmetric : Symmetric X.eq
  eqtrans := Equivalence_Transitive : Transitive X.eq
  a : elt
  s : list elt
  IHs : forall (s' : t) (x : elt),
        Ok s -> Ok s' -> In x (union s s') <-> In x s \/ In x s'
  s' : t
  x : elt
  Hs' : Ok s'
  H : In a s -> False
  H0 : Ok s
  H1 : In x s
  ============================
   (In x s')


Debug:
Going to execute:
<Coq.Init.Tauto.is_empty> flags X1; elimtype X1; assumption


TcDebug (3) > 
Goal:
  
  eq
